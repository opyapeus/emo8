// Generated by purs bundle 0.12.2
var PS = {};
(function(exports) {
  /* jshint maxparams: false */
  /* global exports, XMLHttpRequest */
  "use strict";

  // module Audio.WebAudio.AudioParam

  exports.setValue = function(value) {
    return function(param) {
      return function() {
        param.value = value;
      };
    };
  };


  exports.setValueAtTime = function(value) {
    return function(startTime) {
      return function(param) {
        return function() {
          param.setValueAtTime(value, startTime);
        };
      };
    };
  };

  exports.setTargetAtTime = function(value) {
    return function(startTime) {
      return function(timeConstant) {
        return function(param) {
          return function() {
            param.setTargetAtTime(value, startTime, timeConstant);
          };
        };
      };
    };
  };


  exports.cancelScheduledValues = function(startTime) {
    return function(param) {
      return function() {
        param.cancelScheduledValues(startTime);
      };
    };
  };
})(PS["Audio.WebAudio.AudioParam"] = PS["Audio.WebAudio.AudioParam"] || {});
(function(exports) {
    "use strict";


  exports.nodeConnect = function(_) {
    return function(_) {
      return function(source) {
        return function(sink) {
          return function() {
            source.connect(sink);
          };
        };
      };
    };
  };

  exports.nodeDisconnect = function(_) {
    return function(_) {
      return function(source) {
        return function(sink) {
          return function() {
            source.disconnect(sink);
          };
        };
      };
    };
  };

  exports.unsafeConnectParam = function(_) {
    return function(_) {
      return function(source) {
        return function(target) {
          return function(prop) {
            return function() {
              var value = target[prop];
              source.connect(value);
            };
          };
        };
      };
    };
  };
})(PS["Audio.WebAudio.Types"] = PS["Audio.WebAudio.Types"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                 
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Eq = function (eq) {
      this.eq = eq;
  };
  var eqNumber = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);
  var eqChar = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];                 
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];                 
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  }; 
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };
  var ringNumber = new Ring(function () {
      return Data_Semiring.semiringNumber;
  }, $foreign.numSub);
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
  exports["ringNumber"] = ringNumber;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["lessThan"] = lessThan;
  exports["greaterThan"] = greaterThan;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordChar"] = ordChar;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];                 
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];                 
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };

  exports.numDiv = function (n1) {
    return function (n2) {
      return n1 / n2;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];                 
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  };
  var commutativeRingNumber = new CommutativeRing(function () {
      return Data_Ring.ringNumber;
  });
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
  exports["commutativeRingNumber"] = commutativeRingNumber;
})(PS["Data.CommutativeRing"] = PS["Data.CommutativeRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.EuclideanRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];                 
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  };
  var euclideanRingNumber = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingNumber;
  }, function (v) {
      return 1;
  }, $foreign.numDiv, function (v) {
      return function (v1) {
          return 0.0;
      };
  });
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
  exports["euclideanRingNumber"] = euclideanRingNumber;
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Effect"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                 
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Audio.WebAudio.Types"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var RawAudioNode = {};
  var Connectable = function (connect, connectParam, disconnect) {
      this.connect = connect;
      this.connectParam = connectParam;
      this.disconnect = disconnect;
  }; 
  var disconnect = function (dict) {
      return dict.disconnect;
  };
  var connectParam = function (dict) {
      return dict.connectParam;
  };
  var connect = function (dict) {
      return dict.connect;
  }; 
  var audioNodeOscillatorNode = RawAudioNode;             
  var audioNodeGainNode = RawAudioNode;
  var connectableGainNode = new Connectable(function (dictRawAudioNode) {
      return $foreign.nodeConnect(dictRawAudioNode)(audioNodeGainNode);
  }, function (dictRawAudioNode) {
      return $foreign.unsafeConnectParam(dictRawAudioNode)(audioNodeGainNode);
  }, function (dictRawAudioNode) {
      return $foreign.nodeDisconnect(dictRawAudioNode)(audioNodeGainNode);
  });
  var audioNodeDestinationNode = RawAudioNode;
  var connectableDestinationNode = new Connectable(function (dictRawAudioNode) {
      return $foreign.nodeConnect(dictRawAudioNode)(audioNodeDestinationNode);
  }, function (dictRawAudioNode) {
      return $foreign.unsafeConnectParam(dictRawAudioNode)(audioNodeDestinationNode);
  }, function (dictRawAudioNode) {
      return $foreign.nodeDisconnect(dictRawAudioNode)(audioNodeDestinationNode);
  });
  exports["RawAudioNode"] = RawAudioNode;
  exports["Connectable"] = Connectable;
  exports["connect"] = connect;
  exports["disconnect"] = disconnect;
  exports["connectParam"] = connectParam;
  exports["audioNodeGainNode"] = audioNodeGainNode;
  exports["audioNodeDestinationNode"] = audioNodeDestinationNode;
  exports["audioNodeOscillatorNode"] = audioNodeOscillatorNode;
  exports["connectableGainNode"] = connectableGainNode;
  exports["connectableDestinationNode"] = connectableDestinationNode;
})(PS["Audio.WebAudio.Types"] = PS["Audio.WebAudio.Types"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Audio.WebAudio.AudioParam"];
  var Audio_WebAudio_Types = PS["Audio.WebAudio.Types"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  exports["setTargetAtTime"] = $foreign.setTargetAtTime;
  exports["setValueAtTime"] = $foreign.setValueAtTime;
  exports["setValue"] = $foreign.setValue;
  exports["cancelScheduledValues"] = $foreign.cancelScheduledValues;
})(PS["Audio.WebAudio.AudioParam"] = PS["Audio.WebAudio.AudioParam"] || {});
(function(exports) {
  /* jshint maxparams: false */
  /* global exports, XMLHttpRequest */
  "use strict";

  exports.currentTime = function(cx) {
    return function() {
      return cx.currentTime;
    };
  };

  exports.resume = function(ctx) {
    return function() {
      return ctx.resume();
    };
  };

  /* uncurrried version */
  function _decodeAudioData (cx, audioData, onError, onSuccess) {
     cx.decodeAudioData(audioData, function (buff) {
       // console.log('buffer decoded OK ');
       onSuccess(buff);
      },
      function (e) {
        // console.log('buffer decode failed ');
        onError(e.err);
     });
  };

  exports.createGain = function(ctx) {
    return function() {
      return ctx.createGain();
    };
  };

  exports.createOscillator = function(ctx) {
    return function() {
      return ctx.createOscillator();
    };
  };

  exports.newAudioContext = function() {
    return new (window.AudioContext || window.webkitAudioContext)();
  };
})(PS["Audio.WebAudio.BaseAudioContext"] = PS["Audio.WebAudio.BaseAudioContext"] || {});
(function(exports) {
  /* jshint maxparams: false */
  /* global exports, XMLHttpRequest */
  "use strict";

  // module Audio.WebAudio.Utils


  exports.unsafeSetProp = function(prop) {
    return function(obj) {
      return function(value) {
        return function() {
          obj[prop] = value;
        };
      };
    };
  };


  exports.unsafeGetProp = function(prop) {
    return function(obj) {
      return function() {
        return obj[prop];
      };
    };
  };
})(PS["Audio.WebAudio.Utils"] = PS["Audio.WebAudio.Utils"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Audio.WebAudio.Utils"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_ArrayBuffer = PS["Data.ArrayBuffer.ArrayBuffer"];
  var Data_ArrayBuffer_DataView = PS["Data.ArrayBuffer.DataView"];
  var Data_ArrayBuffer_Typed = PS["Data.ArrayBuffer.Typed"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  exports["unsafeGetProp"] = $foreign.unsafeGetProp;
  exports["unsafeSetProp"] = $foreign.unsafeSetProp;
})(PS["Audio.WebAudio.Utils"] = PS["Audio.WebAudio.Utils"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Audio.WebAudio.BaseAudioContext"];
  var Audio_WebAudio_Types = PS["Audio.WebAudio.Types"];
  var Audio_WebAudio_Utils = PS["Audio.WebAudio.Utils"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Function = PS["Data.Function"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Aff_Compat = PS["Effect.Aff.Compat"];
  var Prelude = PS["Prelude"];
  var destination = Audio_WebAudio_Utils.unsafeGetProp("destination");
  exports["destination"] = destination;
  exports["newAudioContext"] = $foreign.newAudioContext;
  exports["currentTime"] = $foreign.currentTime;
  exports["resume"] = $foreign.resume;
  exports["createGain"] = $foreign.createGain;
  exports["createOscillator"] = $foreign.createOscillator;
})(PS["Audio.WebAudio.BaseAudioContext"] = PS["Audio.WebAudio.BaseAudioContext"] || {});
(function(exports) {
  /* jshint maxparams: false */
  /* global exports, XMLHttpRequest */
  "use strict";

  // module Audio.WebAudio.GainNode

  exports.gain = function(node) {
    return function() {
      return node.gain;
    };
  };
})(PS["Audio.WebAudio.GainNode"] = PS["Audio.WebAudio.GainNode"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Audio.WebAudio.GainNode"];
  var Audio_WebAudio_AudioParam = PS["Audio.WebAudio.AudioParam"];
  var Audio_WebAudio_Types = PS["Audio.WebAudio.Types"];
  var Control_Bind = PS["Control.Bind"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  exports["gain"] = $foreign.gain;
})(PS["Audio.WebAudio.GainNode"] = PS["Audio.WebAudio.GainNode"] || {});
(function(exports) {
  /* jshint maxparams: false */
  /* global exports, XMLHttpRequest */
  "use strict";

  // module Audio.WebAudio.Oscillator

  exports.startOscillator = function(when) {
    return function(n) {
      return function() {
        return n[n.start ? 'start' : 'noteOn'](when);
      };
    };
  };
})(PS["Audio.WebAudio.Oscillator"] = PS["Audio.WebAudio.Oscillator"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Audio.WebAudio.Oscillator"];
  var Audio_WebAudio_AudioParam = PS["Audio.WebAudio.AudioParam"];
  var Audio_WebAudio_Types = PS["Audio.WebAudio.Types"];
  var Audio_WebAudio_Utils = PS["Audio.WebAudio.Utils"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];                 
  var Sine = (function () {
      function Sine() {

      };
      Sine.value = new Sine();
      return Sine;
  })();
  var Square = (function () {
      function Square() {

      };
      Square.value = new Square();
      return Square;
  })();
  var Sawtooth = (function () {
      function Sawtooth() {

      };
      Sawtooth.value = new Sawtooth();
      return Sawtooth;
  })();
  var Triangle = (function () {
      function Triangle() {

      };
      Triangle.value = new Triangle();
      return Triangle;
  })();
  var Custom = (function () {
      function Custom() {

      };
      Custom.value = new Custom();
      return Custom;
  })();
  var oscillatorTypeShow = new Data_Show.Show(function (v) {
      if (v instanceof Sine) {
          return "sine";
      };
      if (v instanceof Square) {
          return "square";
      };
      if (v instanceof Sawtooth) {
          return "sawtooth";
      };
      if (v instanceof Triangle) {
          return "triangle";
      };
      if (v instanceof Custom) {
          return "custom";
      };
      throw new Error("Failed pattern match at Audio.WebAudio.Oscillator (line 18, column 1 - line 18, column 51): " + [ v.constructor.name ]);
  });
  var setOscillatorType = function (t) {
      return function (n) {
          return Audio_WebAudio_Utils.unsafeSetProp("type")(n)(Data_Show.show(oscillatorTypeShow)(t));
      };
  };
  var frequency = Audio_WebAudio_Utils.unsafeGetProp("frequency");
  var detune = Audio_WebAudio_Utils.unsafeGetProp("detune");
  exports["Sine"] = Sine;
  exports["Square"] = Square;
  exports["Sawtooth"] = Sawtooth;
  exports["Triangle"] = Triangle;
  exports["Custom"] = Custom;
  exports["frequency"] = frequency;
  exports["detune"] = detune;
  exports["setOscillatorType"] = setOscillatorType;
  exports["oscillatorTypeShow"] = oscillatorTypeShow;
  exports["startOscillator"] = $foreign.startOscillator;
})(PS["Audio.WebAudio.Oscillator"] = PS["Audio.WebAudio.Oscillator"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Category = PS["Control.Category"];                 
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 67, column 35): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 125, column 33): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Semigroup_First = PS["Data.Semigroup.First"];
  var Data_Semigroup_Last = PS["Data.Semigroup.Last"];
  var Prelude = PS["Prelude"];                 
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };                        
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($80) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($80)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["newtypeDisj"] = newtypeDisj;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($195) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var length = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(function (c) {
              return function (v) {
                  return Data_Semiring.add(dictSemiring)(Data_Semiring.one(dictSemiring))(c);
              };
          })(Data_Semiring.zero(dictSemiring));
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($199) {
              return any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(dictEq)($199));
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["length"] = length;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor_Clown = PS["Data.Bifunctor.Clown"];
  var Data_Bifunctor_Flip = PS["Data.Bifunctor.Flip"];
  var Data_Bifunctor_Joker = PS["Data.Bifunctor.Joker"];
  var Data_Bifunctor_Product = PS["Data.Bifunctor.Product"];
  var Data_Bifunctor_Wrap = PS["Data.Bifunctor.Wrap"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Bifoldable = function (bifoldMap, bifoldl, bifoldr) {
      this.bifoldMap = bifoldMap;
      this.bifoldl = bifoldl;
      this.bifoldr = bifoldr;
  };
  var bifoldr = function (dict) {
      return dict.bifoldr;
  };
  var bifoldl = function (dict) {
      return dict.bifoldl;
  };
  var bifoldMap = function (dict) {
      return dict.bifoldMap;
  };
  exports["bifoldMap"] = bifoldMap;
  exports["bifoldl"] = bifoldl;
  exports["bifoldr"] = bifoldr;
  exports["Bifoldable"] = Bifoldable;
})(PS["Data.Bifoldable"] = PS["Data.Bifoldable"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];                 
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bifunctor_Clown = PS["Data.Bifunctor.Clown"];
  var Data_Bifunctor_Flip = PS["Data.Bifunctor.Flip"];
  var Data_Bifunctor_Joker = PS["Data.Bifunctor.Joker"];
  var Data_Bifunctor_Product = PS["Data.Bifunctor.Product"];
  var Data_Bifunctor_Wrap = PS["Data.Bifunctor.Wrap"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];                 
  var Bitraversable = function (Bifoldable1, Bifunctor0, bisequence, bitraverse) {
      this.Bifoldable1 = Bifoldable1;
      this.Bifunctor0 = Bifunctor0;
      this.bisequence = bisequence;
      this.bitraverse = bitraverse;
  };
  var bitraverse = function (dict) {
      return dict.bitraverse;
  };
  var bisequence = function (dict) {
      return dict.bisequence;
  };
  exports["Bitraversable"] = Bitraversable;
  exports["bitraverse"] = bitraverse;
  exports["bisequence"] = bisequence;
})(PS["Data.Bitraversable"] = PS["Data.Bitraversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 38, column 8 - line 38, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  }; 
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either (line 82, column 1 - line 82, column 41): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
    "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Effect.Ref"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Ref = PS["Effect.Ref"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  }; 
  var monadRecEffect = new MonadRec(function () {
      return Effect.monadEffect;
  }, function (f) {
      return function (a) {
          var fromDone = function (v) {
              if (v instanceof Done) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 111, column 30 - line 111, column 44): " + [ v.constructor.name ]);
          };
          return function __do() {
              var v = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();
              (function () {
                  while (!(function __do() {
                      var v1 = Effect_Ref.read(v)();
                      if (v1 instanceof Loop) {
                          var v2 = f(v1.value0)();
                          var v3 = Effect_Ref.write(v2)(v)();
                          return false;
                      };
                      if (v1 instanceof Done) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 102, column 22 - line 107, column 28): " + [ v1.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(v))();
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["monadRecEffect"] = monadRecEffect;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
    "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
    "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.Unfoldable1"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldr1 = function (dict) {
      return dict.unfoldr1;
  };
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldr1"] = unfoldr1;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  var replicate = function (dictUnfoldable) {
      return function (n) {
          return function (v) {
              var step = function (i) {
                  var $7 = i <= 0;
                  if ($7) {
                      return Data_Maybe.Nothing.value;
                  };
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1 | 0));
              };
              return unfoldr(dictUnfoldable)(step)(n);
          };
      };
  };
  var replicateA = function (dictApplicative) {
      return function (dictUnfoldable) {
          return function (dictTraversable) {
              return function (n) {
                  return function (m) {
                      return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
                  };
              };
          };
      };
  };
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["replicate"] = replicate;
  exports["replicateA"] = replicateA;
  exports["unfoldableArray"] = unfoldableArray;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($174) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($174));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 81, column 12 - line 83, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($175) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($175));
          };
      };
  });
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function ($182) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value))(Data_Foldable.foldl(foldableList)(function (acc) {
                  return function ($183) {
                      return Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc)(f($183));
                  };
              })(Control_Applicative.pure(dictApplicative)(Nil.value))($182));
          };
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 127, column 1 - line 127, column 33): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                                                   
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List (line 259, column 1 - line 259, column 66): " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List (line 245, column 1 - line 245, column 43): " + [ v.constructor.name ]);
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List (line 230, column 1 - line 230, column 22): " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
  exports["reverse"] = reverse;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };                                                                                                
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["CatQueue"] = CatQueue;
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS["Data.CatQueue"] = PS["Data.CatQueue"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_CatQueue = PS["Data.CatQueue"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (v1) {
          if (v instanceof CatNil) {
              return v1;
          };
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $44 = Data_CatQueue["null"](v.value1);
              if ($44) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [ v.constructor.name ]);
  };
  var empty = CatNil.value;
  var append = link;
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["CatNil"] = CatNil;
  exports["CatCons"] = CatCons;
  exports["empty"] = empty;
  exports["append"] = append;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS["Data.CatList"] = PS["Data.CatList"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 220, column 7 - line 224, column 64): " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free (line 218, column 3 - line 226, column 56): " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)(function ($118) {
              return Control_Applicative.pure(freeApplicative)(k($118));
          })(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($119) {
      return fromView(Return.create($119));
  });
  var liftF = function (f) {
      return fromView(new Bind(f, function ($120) {
          return Control_Applicative.pure(freeApplicative)($120);
      }));
  };
  var foldFree = function (dictMonadRec) {
      return function (k) {
          var go = function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(v.value0));
              };
              if (v instanceof Bind) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(function ($127) {
                      return Control_Monad_Rec_Class.Loop.create(v.value1($127));
                  })(k(v.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 151, column 10 - line 153, column 37): " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  exports["liftF"] = liftF;
  exports["foldFree"] = foldFree;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeApply"] = freeApply;
  exports["freeMonad"] = freeMonad;
})(PS["Control.Monad.Free"] = PS["Control.Monad.Free"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };   

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty_Internal = PS["Data.Array.NonEmpty.Internal"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var head = function (xs) {
      return index(xs)(0);
  };
  exports["head"] = head;
  exports["index"] = index;
  exports["zip"] = zip;
  exports["range"] = $foreign.range;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["slice"] = $foreign.slice;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.Enum"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  }; 
  var pred = function (dict) {
      return dict.pred;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($54) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var cardinality = function (dict) {
      return dict.cardinality;
  }; 
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["Enum"] = Enum;
  exports["succ"] = succ;
  exports["pred"] = pred;
  exports["BoundedEnum"] = BoundedEnum;
  exports["cardinality"] = cardinality;
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultPred"] = defaultPred;
  exports["enumChar"] = enumChar;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
    "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.toStringAs = function (radix) {
    return function (i) {
      return i.toString(radix);
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";          

  exports.atan2 = function (y) {
    return function (x) {
      return Math.atan2(y, x);
    };
  };                       

  exports.cos = Math.cos;

  exports.floor = Math.floor;

  exports.remainder = function (n) {
    return function (m) {
      return n % m;
    };
  };                         

  exports.sin = Math.sin;      

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Math"];
  exports["atan2"] = $foreign.atan2;
  exports["cos"] = $foreign.cos;
  exports["floor"] = $foreign.floor;
  exports["sin"] = $foreign.sin;
  exports["remainder"] = $foreign.remainder;
  exports["pi"] = $foreign.pi;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var hexadecimal = 16;             
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["fromNumber"] = fromNumber;
  exports["floor"] = floor;
  exports["hexadecimal"] = hexadecimal;
  exports["toNumber"] = $foreign.toNumber;
  exports["toStringAs"] = $foreign.toStringAs;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._fromCodePointArray = function (singleton) {
    return hasFromCodePoint
      ? function (cps) {
        // Function.prototype.apply will fail for very large second parameters,
        // so we don't use it for arrays with 10,000 or more entries.
        if (cps.length < 10e3) {
          return String.fromCodePoint.apply(String, cps);
        }
        return cps.map(singleton).join("");
      }
      : function (cps) {
        return cps.map(singleton).join("");
      };
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
    "use strict";

  exports.singleton = function (c) {
    return c;
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
    "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.String.CodeUnits"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];
  exports["singleton"] = $foreign.singleton;
  exports["length"] = $foreign.length;
  exports["drop"] = $foreign.drop;
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
    "use strict";

  exports.toUpper = function (s) {
    return s.toUpperCase();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.String.Common"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Prelude = PS["Prelude"];
  exports["toUpper"] = $foreign.toUpper;
  exports["joinWith"] = $foreign.joinWith;
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.String.CodePoints"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  };
  var showCodePoint = new Data_Show.Show(function (v) {
      return "(CodePoint 0x" + (Data_String_Common.toUpper(Data_Int.toStringAs(Data_Int.hexadecimal)(v)) + ")");
  });
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var fromCharCode = function ($53) {
      return Data_String_CodeUnits.singleton(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar))($53));
  };
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };
  var fromCodePointArray = $foreign["_fromCodePointArray"](singletonFallback);
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var eqCodePoint = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordCodePoint = new Data_Ord.Ord(function () {
      return eqCodePoint;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  var boundedCodePoint = new Data_Bounded.Bounded(function () {
      return ordCodePoint;
  }, 0, 1114111);
  var boundedEnumCodePoint = new Data_Enum.BoundedEnum(function () {
      return boundedCodePoint;
  }, function () {
      return enumCodePoint;
  }, 1114111 + 1 | 0, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 1114111) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.String.CodePoints (line 63, column 1 - line 63, column 55): " + [ n.constructor.name ]);
  });
  var enumCodePoint = new Data_Enum.Enum(function () {
      return ordCodePoint;
  }, Data_Enum.defaultPred(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)), Data_Enum.defaultSucc(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)));
  exports["singleton"] = singleton;
  exports["fromCodePointArray"] = fromCodePointArray;
  exports["toCodePointArray"] = toCodePointArray;
  exports["uncons"] = uncons;
  exports["length"] = length;
  exports["take"] = take;
  exports["drop"] = drop;
  exports["eqCodePoint"] = eqCodePoint;
  exports["ordCodePoint"] = ordCodePoint;
  exports["showCodePoint"] = showCodePoint;
  exports["boundedCodePoint"] = boundedCodePoint;
  exports["enumCodePoint"] = enumCodePoint;
  exports["boundedEnumCodePoint"] = boundedEnumCodePoint;
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_CodePoints = PS["Data.String.CodePoints"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];                 
  var RI = (function () {
      function RI(value0) {
          this.value0 = value0;
      };
      RI.create = function (value0) {
          return new RI(value0);
      };
      return RI;
  })();
  var ZWJ = (function () {
      function ZWJ(value0) {
          this.value0 = value0;
      };
      ZWJ.create = function (value0) {
          return new ZWJ(value0);
      };
      return ZWJ;
  })();
  var EM = (function () {
      function EM(value0) {
          this.value0 = value0;
      };
      EM.create = function (value0) {
          return new EM(value0);
      };
      return EM;
  })();
  var EVS = (function () {
      function EVS(value0) {
          this.value0 = value0;
      };
      EVS.create = function (value0) {
          return new EVS(value0);
      };
      return EVS;
  })();
  var EK = (function () {
      function EK(value0) {
          this.value0 = value0;
      };
      EK.create = function (value0) {
          return new EK(value0);
      };
      return EK;
  })();
  var T = (function () {
      function T(value0) {
          this.value0 = value0;
      };
      T.create = function (value0) {
          return new T(value0);
      };
      return T;
  })();
  var TT = (function () {
      function TT(value0) {
          this.value0 = value0;
      };
      TT.create = function (value0) {
          return new TT(value0);
      };
      return TT;
  })();
  var E = (function () {
      function E(value0) {
          this.value0 = value0;
      };
      E.create = function (value0) {
          return new E(value0);
      };
      return E;
  })();
  var toCodePointArray$prime = function ($175) {
      return Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_String_CodePoints.toCodePointArray($175));
  };
  var showEmojiElement = new Data_Show.Show(function (v) {
      if (v instanceof RI) {
          return "Regional Indicator: " + Data_Show.show(Data_String_CodePoints.showCodePoint)(v.value0);
      };
      if (v instanceof ZWJ) {
          return "Zero Width Joiner: " + Data_Show.show(Data_String_CodePoints.showCodePoint)(v.value0);
      };
      if (v instanceof EM) {
          return "Emoji Modifier: " + Data_Show.show(Data_String_CodePoints.showCodePoint)(v.value0);
      };
      if (v instanceof EVS) {
          return "Emoji VS: " + Data_Show.show(Data_String_CodePoints.showCodePoint)(v.value0);
      };
      if (v instanceof EK) {
          return "Enclosing Keycap: " + Data_Show.show(Data_String_CodePoints.showCodePoint)(v.value0);
      };
      if (v instanceof T) {
          return "Tags: " + Data_Show.show(Data_String_CodePoints.showCodePoint)(v.value0);
      };
      if (v instanceof TT) {
          return "Term Tag: " + Data_Show.show(Data_String_CodePoints.showCodePoint)(v.value0);
      };
      if (v instanceof E) {
          return "Emoji: " + Data_Show.show(Data_String_CodePoints.showCodePoint)(v.value0);
      };
      throw new Error("Failed pattern match at Data.String.EmojiSplitter (line 24, column 1 - line 24, column 47): " + [ v.constructor.name ]);
  });
  var inEq = function (low) {
      return function (high) {
          return function (i) {
              return low <= i && i <= high;
          };
      };
  };
  var consume = function (v) {
      if (v instanceof Data_List_Types.Cons && (v.value0 instanceof RI && (v.value1 instanceof Data_List_Types.Cons && v.value1.value0 instanceof RI))) {
          return new Data_Either.Right({
              parsed: Data_String_CodePoints.fromCodePointArray([ v.value0.value0, v.value1.value0.value0 ]),
              remains: v.value1.value1
          });
      };
      if (v instanceof Data_List_Types.Cons && (v.value0 instanceof E && (v.value1 instanceof Data_List_Types.Cons && (v.value1.value0 instanceof T && (v.value1.value1 instanceof Data_List_Types.Cons && (v.value1.value1.value0 instanceof T && (v.value1.value1.value1 instanceof Data_List_Types.Cons && v.value1.value1.value1.value0 instanceof T))))))) {
          if (v.value1.value1.value1.value1 instanceof Data_List_Types.Cons && (v.value1.value1.value1.value1.value0 instanceof T && (v.value1.value1.value1.value1.value1 instanceof Data_List_Types.Cons && (v.value1.value1.value1.value1.value1.value0 instanceof T && (v.value1.value1.value1.value1.value1.value1 instanceof Data_List_Types.Cons && v.value1.value1.value1.value1.value1.value1.value0 instanceof TT))))) {
              return new Data_Either.Right({
                  parsed: Data_String_CodePoints.fromCodePointArray([ v.value0.value0, v.value1.value0.value0, v.value1.value1.value0.value0, v.value1.value1.value1.value0.value0, v.value1.value1.value1.value1.value0.value0, v.value1.value1.value1.value1.value1.value0.value0, v.value1.value1.value1.value1.value1.value1.value0.value0 ]),
                  remains: v.value1.value1.value1.value1.value1.value1.value1
              });
          };
          return Data_Either.Left.create("next expects Tags");
      };
      if (v instanceof Data_List_Types.Cons && (v.value0 instanceof E && (v.value1 instanceof Data_List_Types.Cons && (v.value1.value0 instanceof ZWJ && (v.value1.value1 instanceof Data_List_Types.Cons && (v.value1.value1.value0 instanceof E && (v.value1.value1.value1 instanceof Data_List_Types.Cons && v.value1.value1.value1.value0 instanceof ZWJ))))))) {
          if (v.value1.value1.value1.value1 instanceof Data_List_Types.Cons && (v.value1.value1.value1.value1.value0 instanceof E && (v.value1.value1.value1.value1.value1 instanceof Data_List_Types.Cons && (v.value1.value1.value1.value1.value1.value0 instanceof ZWJ && (v.value1.value1.value1.value1.value1.value1 instanceof Data_List_Types.Cons && v.value1.value1.value1.value1.value1.value1.value0 instanceof E))))) {
              return new Data_Either.Right({
                  parsed: Data_String_CodePoints.fromCodePointArray([ v.value0.value0, v.value1.value0.value0, v.value1.value1.value0.value0, v.value1.value1.value1.value0.value0, v.value1.value1.value1.value1.value0.value0, v.value1.value1.value1.value1.value1.value0.value0, v.value1.value1.value1.value1.value1.value1.value0.value0 ]),
                  remains: v.value1.value1.value1.value1.value1.value1.value1
              });
          };
          if (v.value1.value1.value1.value1 instanceof Data_List_Types.Cons && v.value1.value1.value1.value1.value0 instanceof E) {
              return new Data_Either.Right({
                  parsed: Data_String_CodePoints.fromCodePointArray([ v.value0.value0, v.value1.value0.value0, v.value1.value1.value0.value0, v.value1.value1.value1.value0.value0, v.value1.value1.value1.value1.value0.value0 ]),
                  remains: v.value1.value1.value1.value1.value1
              });
          };
          return Data_Either.Left.create("next expects Emoji");
      };
      if (v instanceof Data_List_Types.Cons && (v.value0 instanceof E && (v.value1 instanceof Data_List_Types.Cons && (v.value1.value0 instanceof EM && (v.value1.value1 instanceof Data_List_Types.Cons && (v.value1.value1.value0 instanceof ZWJ && (v.value1.value1.value1 instanceof Data_List_Types.Cons && v.value1.value1.value1.value0 instanceof E))))))) {
          if (v.value1.value1.value1.value1 instanceof Data_List_Types.Cons && v.value1.value1.value1.value1.value0 instanceof EVS) {
              return new Data_Either.Right({
                  parsed: Data_String_CodePoints.fromCodePointArray([ v.value0.value0, v.value1.value0.value0, v.value1.value1.value0.value0, v.value1.value1.value1.value0.value0, v.value1.value1.value1.value1.value0.value0 ]),
                  remains: v.value1.value1.value1.value1.value1
              });
          };
          return new Data_Either.Right({
              parsed: Data_String_CodePoints.fromCodePointArray([ v.value0.value0, v.value1.value0.value0, v.value1.value1.value0.value0, v.value1.value1.value1.value0.value0 ]),
              remains: v.value1.value1.value1.value1
          });
      };
      if (v instanceof Data_List_Types.Cons && (v.value0 instanceof E && (v.value1 instanceof Data_List_Types.Cons && (v.value1.value0 instanceof ZWJ && (v.value1.value1 instanceof Data_List_Types.Cons && (v.value1.value1.value0 instanceof E && (v.value1.value1.value1 instanceof Data_List_Types.Cons && v.value1.value1.value1.value0 instanceof EVS))))))) {
          if (v.value1.value1.value1.value1 instanceof Data_List_Types.Cons && (v.value1.value1.value1.value1.value0 instanceof ZWJ && (v.value1.value1.value1.value1.value1 instanceof Data_List_Types.Cons && (v.value1.value1.value1.value1.value1.value0 instanceof E && (v.value1.value1.value1.value1.value1.value1 instanceof Data_List_Types.Cons && (v.value1.value1.value1.value1.value1.value1.value0 instanceof ZWJ && (v.value1.value1.value1.value1.value1.value1.value1 instanceof Data_List_Types.Cons && v.value1.value1.value1.value1.value1.value1.value1.value0 instanceof E))))))) {
              return new Data_Either.Right({
                  parsed: Data_String_CodePoints.fromCodePointArray([ v.value0.value0, v.value1.value0.value0, v.value1.value1.value0.value0, v.value1.value1.value1.value0.value0, v.value1.value1.value1.value1.value0.value0, v.value1.value1.value1.value1.value1.value0.value0, v.value1.value1.value1.value1.value1.value1.value0.value0, v.value1.value1.value1.value1.value1.value1.value1.value0.value0 ]),
                  remains: v.value1.value1.value1.value1.value1.value1.value1.value1
              });
          };
          if (v.value1.value1.value1.value1 instanceof Data_List_Types.Cons && (v.value1.value1.value1.value1.value0 instanceof ZWJ && (v.value1.value1.value1.value1.value1 instanceof Data_List_Types.Cons && v.value1.value1.value1.value1.value1.value0 instanceof E))) {
              return new Data_Either.Right({
                  parsed: Data_String_CodePoints.fromCodePointArray([ v.value0.value0, v.value1.value0.value0, v.value1.value1.value0.value0, v.value1.value1.value1.value0.value0, v.value1.value1.value1.value1.value0.value0, v.value1.value1.value1.value1.value1.value0.value0 ]),
                  remains: v.value1.value1.value1.value1.value1.value1
              });
          };
          return new Data_Either.Right({
              parsed: Data_String_CodePoints.fromCodePointArray([ v.value0.value0, v.value1.value0.value0, v.value1.value1.value0.value0, v.value1.value1.value1.value0.value0 ]),
              remains: v.value1.value1.value1.value1
          });
      };
      if (v instanceof Data_List_Types.Cons && (v.value0 instanceof E && (v.value1 instanceof Data_List_Types.Cons && (v.value1.value0 instanceof EVS && (v.value1.value1 instanceof Data_List_Types.Cons && (v.value1.value1.value0 instanceof ZWJ && (v.value1.value1.value1 instanceof Data_List_Types.Cons && v.value1.value1.value1.value0 instanceof E))))))) {
          if (v.value1.value1.value1.value1 instanceof Data_List_Types.Cons && v.value1.value1.value1.value1.value0 instanceof EVS) {
              return new Data_Either.Right({
                  parsed: Data_String_CodePoints.fromCodePointArray([ v.value0.value0, v.value1.value0.value0, v.value1.value1.value0.value0, v.value1.value1.value1.value0.value0, v.value1.value1.value1.value1.value0.value0 ]),
                  remains: v.value1.value1.value1.value1.value1
              });
          };
          return new Data_Either.Right({
              parsed: Data_String_CodePoints.fromCodePointArray([ v.value0.value0, v.value1.value0.value0, v.value1.value1.value0.value0, v.value1.value1.value1.value0.value0 ]),
              remains: v.value1.value1.value1.value1
          });
      };
      if (v instanceof Data_List_Types.Cons && (v.value0 instanceof E && (v.value1 instanceof Data_List_Types.Cons && (v.value1.value0 instanceof ZWJ && (v.value1.value1 instanceof Data_List_Types.Cons && v.value1.value1.value0 instanceof E))))) {
          return new Data_Either.Right({
              parsed: Data_String_CodePoints.fromCodePointArray([ v.value0.value0, v.value1.value0.value0, v.value1.value1.value0.value0 ]),
              remains: v.value1.value1.value1
          });
      };
      if (v instanceof Data_List_Types.Cons && (v.value0 instanceof E && (v.value1 instanceof Data_List_Types.Cons && (v.value1.value0 instanceof EVS && (v.value1.value1 instanceof Data_List_Types.Cons && v.value1.value1.value0 instanceof EK))))) {
          return new Data_Either.Right({
              parsed: Data_String_CodePoints.fromCodePointArray([ v.value0.value0, v.value1.value0.value0, v.value1.value1.value0.value0 ]),
              remains: v.value1.value1.value1
          });
      };
      if (v instanceof Data_List_Types.Cons && (v.value0 instanceof E && (v.value1 instanceof Data_List_Types.Cons && v.value1.value0 instanceof EVS))) {
          return new Data_Either.Right({
              parsed: Data_String_CodePoints.fromCodePointArray([ v.value0.value0, v.value1.value0.value0 ]),
              remains: v.value1.value1
          });
      };
      if (v instanceof Data_List_Types.Cons && (v.value0 instanceof E && (v.value1 instanceof Data_List_Types.Cons && v.value1.value0 instanceof EM))) {
          return new Data_Either.Right({
              parsed: Data_String_CodePoints.fromCodePointArray([ v.value0.value0, v.value1.value0.value0 ]),
              remains: v.value1.value1
          });
      };
      if (v instanceof Data_List_Types.Cons && v.value0 instanceof E) {
          return new Data_Either.Right({
              parsed: Data_String_CodePoints.singleton(v.value0.value0),
              remains: v.value1
          });
      };
      if (v instanceof Data_List_Types.Nil) {
          return Data_Either.Right.create({
              parsed: "",
              remains: Data_List_Types.Nil.value
          });
      };
      if (v instanceof Data_List_Types.Cons) {
          return Data_Either.Left.create("start with " + (Data_Show.show(showEmojiElement)(v.value0) + " is not match."));
      };
      throw new Error("Failed pattern match at Data.String.EmojiSplitter (line 61, column 1 - line 61, column 60): " + [ v.constructor.name ]);
  };
  var parse = function (es) {
      var v = consume(es);
      if (v instanceof Data_Either.Right && v.value0.remains instanceof Data_List_Types.Nil) {
          return Data_Either.Right.create(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value0.parsed));
      };
      if (v instanceof Data_Either.Right) {
          return Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(Data_List_Types.Cons.create)(new Data_Either.Right(v.value0.parsed)))(parse(v.value0.remains));
      };
      if (v instanceof Data_Either.Left) {
          return new Data_Either.Left(v.value0);
      };
      throw new Error("Failed pattern match at Data.String.EmojiSplitter (line 56, column 12 - line 59, column 23): " + [ v.constructor.name ]);
  };
  var codeToElem = function (c) {
      var f = function (i) {
          if (inEq(127462)(127487)(i)) {
              return Data_Either.Right.create(new RI(c));
          };
          if (inEq(127995)(127999)(i)) {
              return Data_Either.Right.create(new EM(c));
          };
          if (8205 === i) {
              return Data_Either.Right.create(new ZWJ(c));
          };
          if (65038 === i) {
              return Data_Either.Right.create(new EVS(c));
          };
          if (65039 === i) {
              return Data_Either.Right.create(new EVS(c));
          };
          if (8419 === i) {
              return Data_Either.Right.create(new EK(c));
          };
          if (inEq(917536)(917630)(i)) {
              return Data_Either.Right.create(new T(c));
          };
          if (917631 === i) {
              return Data_Either.Right.create(new TT(c));
          };
          if (35 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (42 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(48)(57)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (169 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (174 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (8252 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (8265 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (8482 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (8505 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(8596)(8601)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(8617)(8618)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(8986)(8987)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (9000 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (9167 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9193)(9203)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9208)(9210)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (9410 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9642)(9643)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (9654 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (9664 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9723)(9726)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9728)(9732)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (9742 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (9745 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9748)(9749)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (9752 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (9757 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (9760 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9762)(9763)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (9766 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (9770 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9774)(9775)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9784)(9786)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (9792 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (9794 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9800)(9811)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9823)(9824)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (9827 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9829)(9830)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (9832 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (9851 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9854)(9855)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9874)(9879)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (9881 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9883)(9884)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9888)(9889)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9898)(9899)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9904)(9905)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9917)(9918)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9924)(9925)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (9928 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (9934 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (9935 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (9937 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9939)(9940)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9961)(9962)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9968)(9973)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9975)(9978)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (9981 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (9986 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (9989 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9992)(9993)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9994)(9995)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(9996)(9997)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (9999 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (10002 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (10004 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (10006 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (10013 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (10017 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (10024 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(10035)(10036)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (10052 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (10055 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (10060 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (10062 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(10067)(10069)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (10071 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(10083)(10084)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(10133)(10135)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (10145 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (10160 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (10175 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(10548)(10549)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(11013)(11015)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(11035)(11036)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (11088 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (11093 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (12336 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (12349 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (12951 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (12953 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (126980 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (127183 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127344)(127345)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (127358 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (127359 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (127374 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127377)(127386)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127489)(127490)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (127514 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (127535 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127538)(127546)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127568)(127569)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127744)(127776)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (127777 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127780)(127788)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127789)(127791)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127792)(127797)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (127798 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127799)(127868)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (127869 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127870)(127871)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127872)(127891)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127894)(127895)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127897)(127899)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127902)(127903)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127904)(127940)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (127941 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127942)(127946)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127947)(127950)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127951)(127955)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127956)(127967)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127968)(127984)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127987)(127989)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (127991 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(127992)(127994)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128000)(128062)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (128063 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (128064 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (128065 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128066)(128247)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (128248 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128249)(128252)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (128253 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (128255 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128256)(128317)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128329)(128330)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128331)(128334)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128336)(128359)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128367)(128368)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128371)(128377)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (128378 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (128391 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128394)(128397)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (128400 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128405)(128406)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (128420 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (128421 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (128424 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128433)(128434)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (128444 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128450)(128452)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128465)(128467)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128476)(128478)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (128481 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (128483 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (128488 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (128495 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (128499 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (128506 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128507)(128511)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (128512 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128513)(128528)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (128529 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128530)(128532)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (128533 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (128534 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (128535 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (128536 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (128537 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (128538 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (128539 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128540)(128542)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (128543 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128544)(128549)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128550)(128551)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128552)(128555)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (128556 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (128557 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128558)(128559)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128560)(128563)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (128564 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128565)(128576)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128577)(128578)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128579)(128580)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128581)(128591)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128640)(128709)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128715)(128719)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (128720 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128721)(128722)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128736)(128741)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (128745 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128747)(128748)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (128752 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (128755 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128756)(128758)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(128759)(128760)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (128761 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129296)(129304)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129305)(129310)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (129311 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129312)(129319)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129320)(129327)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (129328 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129329)(129330)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129331)(129338)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129340)(129342)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129344)(129349)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129351)(129355)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (129356 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129357)(129359)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129360)(129374)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129375)(129387)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129388)(129392)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129395)(129398)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (129402 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129404)(129407)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129408)(129412)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129413)(129425)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129426)(129431)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129432)(129442)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129456)(129465)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (129472 === i) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129473)(129474)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129488)(129510)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (inEq(129511)(129535)(i)) {
              return Data_Either.Right.create(new E(c));
          };
          if (Data_Boolean.otherwise) {
              return Data_Either.Left.create("can not convert " + (Data_Show.show(Data_String_CodePoints.showCodePoint)(c) + " to emoji element."));
          };
          throw new Error("Failed pattern match at Data.String.EmojiSplitter (line 107, column 5 - line 107, column 45): " + [ i.constructor.name ]);
      };
      return f(Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint)(c));
  };
  var splitEmoji$prime = function (s) {
      var codePoints = toCodePointArray$prime(s);
      return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_List_Types.traversableList)(Data_Either.applicativeEither)(codeToElem)(codePoints))(function (v) {
          return parse(v);
      });
  };
  var splitEmoji = function ($176) {
      return Data_Functor.map(Data_Either.functorEither)(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray))(splitEmoji$prime($176));
  };
  exports["splitEmoji"] = splitEmoji;
})(PS["Data.String.EmojiSplitter"] = PS["Data.String.EmojiSplitter"] || {});
(function(exports) {
    "use strict";

  function _codePointAt (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          var codePointArray = Array.from(s);
          var isWithinRange  = i >= 0 && i < codePointArray.length;

          return isWithinRange ? just(codePointArray[i].codePointAt(0)) : nothing;
        };
      };
    };
  }

  function _codePointAtP (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.codePointAt(i)) : nothing;
        };
      };
    };
  }

  function endsWith (searchString) {
    return function (s) {
      return s.endsWith(searchString);
    };
  }

  function endsWithP (searchString) {
    return function (position) {
      return function (s) {
        return s.endsWith(searchString, position);
      };
    };
  }

  function escapeRegex (str) {
    return str.replace(/[.*+?^${}()|[\]\-\\]/g, "\\$&");
  }

  function fromCharArray (array) {
    return array.join("");
  }

  function includes (searchString) {
    return function (str) {
      return str.includes(searchString);
    };
  }

  function includesP (needle) {
    return function (position) {
      return function (haystack) {
        // For negative `position` values, we search from the beginning of the
        // string. This is in accordance with the native
        // `String.prototype.include` function.
        var pos = Math.max(0, position);

        // Converting to arrays takes care of any surrogate code points
        var needleA    = Array.from(needle);
        var haystackA  = Array.from(haystack).slice(pos);
        var needleALen = needleA.length;

        var maxIndex = haystackA.length + 1 - needleALen;
        var found    = false;
        var i;

        // Naive implementation, at some point we should check whether Boyer-Moore
        // or Knuth-Morris-Pratt are worthwhile
        for (i = 0; i < maxIndex; i++) {
          if (needleA.every(function (e, j) { return e === haystackA[i+j]; })) {
            found = true;
            break;
          }
        }

        return found;
      };
    };
  }

  function length (str) {
    return Array.from(str).length;
  }

  function lines (str) {
    // See http://www.unicode.org/reports/tr18/#RL1.6
    return str.split(/\r\n|[\n\v\f\r\u0085\u2028\u2029]/);
  }

  function normalize (str) {
    return str.normalize();
  }

  function _normalizeP (normalizationForm) {
    return function (str) {
      return str.normalize(normalizationForm);
    };
  }

  function _repeat (just) {
    return function (nothing) {
      return function (n) {
        return function (str) {
          var result;

          try {
            result = just(str.repeat(n));
          }
          catch (error) {
            result = nothing;
          }

          return result;
        };
      };
    };
  }

  function startsWith (searchString) {
    return function (s) {
      return s.startsWith(searchString);
    };
  }

  function startsWithP (searchString) {
    return function (position) {
      return function (s) {
        return s.startsWith(searchString, position);
      };
    };
  }

  function stripChars (chars) {
    return function (s) {
      return s.replace(RegExp("[" + escapeRegex(chars) + "]", "g"), "");
    };
  }

  function stripDiacritics (str) {
    return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  }

  function toCharArray (str) {
    return Array.from(str);
  }

  function unsafeCodePointAt (i) {
    return function (s) {
      var codePointArray = Array.from(s);
      var isWithinRange = i >= 0 && i < codePointArray.length;

      if (isWithinRange) {
        return codePointArray[i].codePointAt(0);
      }
      else {
        throw new Error("Data.String.Utils.unsafeCodePointAt: Invalid index");
      }
    };
  }

  function unsafeCodePointAtP (i) {
    return function (s) {
      if (i >= 0 && i < s.length) {
        return s.codePointAt(i);
      }
      else {
        throw new Error("Data.String.Utils.unsafeCodePointAt': Invalid index");
      }
    };
  }

  function unsafeRepeat (n) {
    return function (str) {
      try {
        return str.repeat(n);
      }
      catch (error) {
        throw new Error("Data.String.Utils.unsafeRepeat: Invalid count");
      }
    };
  }

  function words (s) {
    return s.split(/\s+/);
  }                                   
  exports.lines              = lines;
})(PS["Data.String.Utils"] = PS["Data.String.Utils"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Data.String.Utils"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  exports["lines"] = $foreign.lines;
})(PS["Data.String.Utils"] = PS["Data.String.Utils"] || {});
(function(exports) {
    "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Effect.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var $$throw = function ($1) {
      return $foreign.throwException($foreign.error($1));
  };
  exports["throw"] = $$throw;
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function(exports) {
    "use strict";

  exports.random = Math.random;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Effect.Random"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];                 
  var randomRange = function (min) {
      return function (max) {
          return function __do() {
              var v = $foreign.random();
              return v * (max - min) + min;
          };
      };
  };
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var v = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * v + Data_Int.toNumber(low);
              return Data_Int.floor(asNumber);
          };
      };
  };
  exports["randomInt"] = randomInt;
  exports["randomRange"] = randomRange;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var AliceBlue = (function () {
      function AliceBlue() {

      };
      AliceBlue.value = new AliceBlue();
      return AliceBlue;
  })();
  var AntiqueWhite = (function () {
      function AntiqueWhite() {

      };
      AntiqueWhite.value = new AntiqueWhite();
      return AntiqueWhite;
  })();
  var Aqua = (function () {
      function Aqua() {

      };
      Aqua.value = new Aqua();
      return Aqua;
  })();
  var Aquamarine = (function () {
      function Aquamarine() {

      };
      Aquamarine.value = new Aquamarine();
      return Aquamarine;
  })();
  var Azure = (function () {
      function Azure() {

      };
      Azure.value = new Azure();
      return Azure;
  })();
  var Beige = (function () {
      function Beige() {

      };
      Beige.value = new Beige();
      return Beige;
  })();
  var Bisque = (function () {
      function Bisque() {

      };
      Bisque.value = new Bisque();
      return Bisque;
  })();
  var Black = (function () {
      function Black() {

      };
      Black.value = new Black();
      return Black;
  })();
  var BlanchedAlmond = (function () {
      function BlanchedAlmond() {

      };
      BlanchedAlmond.value = new BlanchedAlmond();
      return BlanchedAlmond;
  })();
  var Blue = (function () {
      function Blue() {

      };
      Blue.value = new Blue();
      return Blue;
  })();
  var BlueViolet = (function () {
      function BlueViolet() {

      };
      BlueViolet.value = new BlueViolet();
      return BlueViolet;
  })();
  var Brown = (function () {
      function Brown() {

      };
      Brown.value = new Brown();
      return Brown;
  })();
  var BurlyWood = (function () {
      function BurlyWood() {

      };
      BurlyWood.value = new BurlyWood();
      return BurlyWood;
  })();
  var CadetBlue = (function () {
      function CadetBlue() {

      };
      CadetBlue.value = new CadetBlue();
      return CadetBlue;
  })();
  var Chartreuse = (function () {
      function Chartreuse() {

      };
      Chartreuse.value = new Chartreuse();
      return Chartreuse;
  })();
  var Chocolate = (function () {
      function Chocolate() {

      };
      Chocolate.value = new Chocolate();
      return Chocolate;
  })();
  var Coral = (function () {
      function Coral() {

      };
      Coral.value = new Coral();
      return Coral;
  })();
  var CornflowerBlue = (function () {
      function CornflowerBlue() {

      };
      CornflowerBlue.value = new CornflowerBlue();
      return CornflowerBlue;
  })();
  var Cornsilk = (function () {
      function Cornsilk() {

      };
      Cornsilk.value = new Cornsilk();
      return Cornsilk;
  })();
  var Crimson = (function () {
      function Crimson() {

      };
      Crimson.value = new Crimson();
      return Crimson;
  })();
  var Cyan = (function () {
      function Cyan() {

      };
      Cyan.value = new Cyan();
      return Cyan;
  })();
  var DarkBlue = (function () {
      function DarkBlue() {

      };
      DarkBlue.value = new DarkBlue();
      return DarkBlue;
  })();
  var DarkCyan = (function () {
      function DarkCyan() {

      };
      DarkCyan.value = new DarkCyan();
      return DarkCyan;
  })();
  var DarkGoldenRod = (function () {
      function DarkGoldenRod() {

      };
      DarkGoldenRod.value = new DarkGoldenRod();
      return DarkGoldenRod;
  })();
  var DarkGray = (function () {
      function DarkGray() {

      };
      DarkGray.value = new DarkGray();
      return DarkGray;
  })();
  var DarkGrey = (function () {
      function DarkGrey() {

      };
      DarkGrey.value = new DarkGrey();
      return DarkGrey;
  })();
  var DarkGreen = (function () {
      function DarkGreen() {

      };
      DarkGreen.value = new DarkGreen();
      return DarkGreen;
  })();
  var DarkKhaki = (function () {
      function DarkKhaki() {

      };
      DarkKhaki.value = new DarkKhaki();
      return DarkKhaki;
  })();
  var DarkMagenta = (function () {
      function DarkMagenta() {

      };
      DarkMagenta.value = new DarkMagenta();
      return DarkMagenta;
  })();
  var DarkOliveGreen = (function () {
      function DarkOliveGreen() {

      };
      DarkOliveGreen.value = new DarkOliveGreen();
      return DarkOliveGreen;
  })();
  var DarkOrange = (function () {
      function DarkOrange() {

      };
      DarkOrange.value = new DarkOrange();
      return DarkOrange;
  })();
  var DarkOrchid = (function () {
      function DarkOrchid() {

      };
      DarkOrchid.value = new DarkOrchid();
      return DarkOrchid;
  })();
  var DarkRed = (function () {
      function DarkRed() {

      };
      DarkRed.value = new DarkRed();
      return DarkRed;
  })();
  var DarkSalmon = (function () {
      function DarkSalmon() {

      };
      DarkSalmon.value = new DarkSalmon();
      return DarkSalmon;
  })();
  var DarkSeaGreen = (function () {
      function DarkSeaGreen() {

      };
      DarkSeaGreen.value = new DarkSeaGreen();
      return DarkSeaGreen;
  })();
  var DarkSlateBlue = (function () {
      function DarkSlateBlue() {

      };
      DarkSlateBlue.value = new DarkSlateBlue();
      return DarkSlateBlue;
  })();
  var DarkSlateGray = (function () {
      function DarkSlateGray() {

      };
      DarkSlateGray.value = new DarkSlateGray();
      return DarkSlateGray;
  })();
  var DarkSlateGrey = (function () {
      function DarkSlateGrey() {

      };
      DarkSlateGrey.value = new DarkSlateGrey();
      return DarkSlateGrey;
  })();
  var DarkTurquoise = (function () {
      function DarkTurquoise() {

      };
      DarkTurquoise.value = new DarkTurquoise();
      return DarkTurquoise;
  })();
  var DarkViolet = (function () {
      function DarkViolet() {

      };
      DarkViolet.value = new DarkViolet();
      return DarkViolet;
  })();
  var DeepPink = (function () {
      function DeepPink() {

      };
      DeepPink.value = new DeepPink();
      return DeepPink;
  })();
  var DeepSkyBlue = (function () {
      function DeepSkyBlue() {

      };
      DeepSkyBlue.value = new DeepSkyBlue();
      return DeepSkyBlue;
  })();
  var DimGray = (function () {
      function DimGray() {

      };
      DimGray.value = new DimGray();
      return DimGray;
  })();
  var DimGrey = (function () {
      function DimGrey() {

      };
      DimGrey.value = new DimGrey();
      return DimGrey;
  })();
  var DodgerBlue = (function () {
      function DodgerBlue() {

      };
      DodgerBlue.value = new DodgerBlue();
      return DodgerBlue;
  })();
  var FireBrick = (function () {
      function FireBrick() {

      };
      FireBrick.value = new FireBrick();
      return FireBrick;
  })();
  var FloralWhite = (function () {
      function FloralWhite() {

      };
      FloralWhite.value = new FloralWhite();
      return FloralWhite;
  })();
  var ForestGreen = (function () {
      function ForestGreen() {

      };
      ForestGreen.value = new ForestGreen();
      return ForestGreen;
  })();
  var Fuchsia = (function () {
      function Fuchsia() {

      };
      Fuchsia.value = new Fuchsia();
      return Fuchsia;
  })();
  var Gainsboro = (function () {
      function Gainsboro() {

      };
      Gainsboro.value = new Gainsboro();
      return Gainsboro;
  })();
  var GhostWhite = (function () {
      function GhostWhite() {

      };
      GhostWhite.value = new GhostWhite();
      return GhostWhite;
  })();
  var Gold = (function () {
      function Gold() {

      };
      Gold.value = new Gold();
      return Gold;
  })();
  var GoldenRod = (function () {
      function GoldenRod() {

      };
      GoldenRod.value = new GoldenRod();
      return GoldenRod;
  })();
  var Gray = (function () {
      function Gray() {

      };
      Gray.value = new Gray();
      return Gray;
  })();
  var Grey = (function () {
      function Grey() {

      };
      Grey.value = new Grey();
      return Grey;
  })();
  var Green = (function () {
      function Green() {

      };
      Green.value = new Green();
      return Green;
  })();
  var GreenYellow = (function () {
      function GreenYellow() {

      };
      GreenYellow.value = new GreenYellow();
      return GreenYellow;
  })();
  var HoneyDew = (function () {
      function HoneyDew() {

      };
      HoneyDew.value = new HoneyDew();
      return HoneyDew;
  })();
  var HotPink = (function () {
      function HotPink() {

      };
      HotPink.value = new HotPink();
      return HotPink;
  })();
  var IndianRed = (function () {
      function IndianRed() {

      };
      IndianRed.value = new IndianRed();
      return IndianRed;
  })();
  var Indigo = (function () {
      function Indigo() {

      };
      Indigo.value = new Indigo();
      return Indigo;
  })();
  var Ivory = (function () {
      function Ivory() {

      };
      Ivory.value = new Ivory();
      return Ivory;
  })();
  var Khaki = (function () {
      function Khaki() {

      };
      Khaki.value = new Khaki();
      return Khaki;
  })();
  var Lavender = (function () {
      function Lavender() {

      };
      Lavender.value = new Lavender();
      return Lavender;
  })();
  var LavenderBlush = (function () {
      function LavenderBlush() {

      };
      LavenderBlush.value = new LavenderBlush();
      return LavenderBlush;
  })();
  var LawnGreen = (function () {
      function LawnGreen() {

      };
      LawnGreen.value = new LawnGreen();
      return LawnGreen;
  })();
  var LemonChiffon = (function () {
      function LemonChiffon() {

      };
      LemonChiffon.value = new LemonChiffon();
      return LemonChiffon;
  })();
  var LightBlue = (function () {
      function LightBlue() {

      };
      LightBlue.value = new LightBlue();
      return LightBlue;
  })();
  var LightCoral = (function () {
      function LightCoral() {

      };
      LightCoral.value = new LightCoral();
      return LightCoral;
  })();
  var LightCyan = (function () {
      function LightCyan() {

      };
      LightCyan.value = new LightCyan();
      return LightCyan;
  })();
  var LightGoldenRodYellow = (function () {
      function LightGoldenRodYellow() {

      };
      LightGoldenRodYellow.value = new LightGoldenRodYellow();
      return LightGoldenRodYellow;
  })();
  var LightGray = (function () {
      function LightGray() {

      };
      LightGray.value = new LightGray();
      return LightGray;
  })();
  var LightGrey = (function () {
      function LightGrey() {

      };
      LightGrey.value = new LightGrey();
      return LightGrey;
  })();
  var LightGreen = (function () {
      function LightGreen() {

      };
      LightGreen.value = new LightGreen();
      return LightGreen;
  })();
  var LightPink = (function () {
      function LightPink() {

      };
      LightPink.value = new LightPink();
      return LightPink;
  })();
  var LightSalmon = (function () {
      function LightSalmon() {

      };
      LightSalmon.value = new LightSalmon();
      return LightSalmon;
  })();
  var LightSeaGreen = (function () {
      function LightSeaGreen() {

      };
      LightSeaGreen.value = new LightSeaGreen();
      return LightSeaGreen;
  })();
  var LightSkyBlue = (function () {
      function LightSkyBlue() {

      };
      LightSkyBlue.value = new LightSkyBlue();
      return LightSkyBlue;
  })();
  var LightSlateGray = (function () {
      function LightSlateGray() {

      };
      LightSlateGray.value = new LightSlateGray();
      return LightSlateGray;
  })();
  var LightSlateGrey = (function () {
      function LightSlateGrey() {

      };
      LightSlateGrey.value = new LightSlateGrey();
      return LightSlateGrey;
  })();
  var LightSteelBlue = (function () {
      function LightSteelBlue() {

      };
      LightSteelBlue.value = new LightSteelBlue();
      return LightSteelBlue;
  })();
  var LightYellow = (function () {
      function LightYellow() {

      };
      LightYellow.value = new LightYellow();
      return LightYellow;
  })();
  var Lime = (function () {
      function Lime() {

      };
      Lime.value = new Lime();
      return Lime;
  })();
  var LimeGreen = (function () {
      function LimeGreen() {

      };
      LimeGreen.value = new LimeGreen();
      return LimeGreen;
  })();
  var Linen = (function () {
      function Linen() {

      };
      Linen.value = new Linen();
      return Linen;
  })();
  var Magenta = (function () {
      function Magenta() {

      };
      Magenta.value = new Magenta();
      return Magenta;
  })();
  var Maroon = (function () {
      function Maroon() {

      };
      Maroon.value = new Maroon();
      return Maroon;
  })();
  var MediumAquaMarine = (function () {
      function MediumAquaMarine() {

      };
      MediumAquaMarine.value = new MediumAquaMarine();
      return MediumAquaMarine;
  })();
  var MediumBlue = (function () {
      function MediumBlue() {

      };
      MediumBlue.value = new MediumBlue();
      return MediumBlue;
  })();
  var MediumOrchid = (function () {
      function MediumOrchid() {

      };
      MediumOrchid.value = new MediumOrchid();
      return MediumOrchid;
  })();
  var MediumPurple = (function () {
      function MediumPurple() {

      };
      MediumPurple.value = new MediumPurple();
      return MediumPurple;
  })();
  var MediumSeaGreen = (function () {
      function MediumSeaGreen() {

      };
      MediumSeaGreen.value = new MediumSeaGreen();
      return MediumSeaGreen;
  })();
  var MediumSlateBlue = (function () {
      function MediumSlateBlue() {

      };
      MediumSlateBlue.value = new MediumSlateBlue();
      return MediumSlateBlue;
  })();
  var MediumSpringGreen = (function () {
      function MediumSpringGreen() {

      };
      MediumSpringGreen.value = new MediumSpringGreen();
      return MediumSpringGreen;
  })();
  var MediumTurquoise = (function () {
      function MediumTurquoise() {

      };
      MediumTurquoise.value = new MediumTurquoise();
      return MediumTurquoise;
  })();
  var MediumVioletRed = (function () {
      function MediumVioletRed() {

      };
      MediumVioletRed.value = new MediumVioletRed();
      return MediumVioletRed;
  })();
  var MidnightBlue = (function () {
      function MidnightBlue() {

      };
      MidnightBlue.value = new MidnightBlue();
      return MidnightBlue;
  })();
  var MintCream = (function () {
      function MintCream() {

      };
      MintCream.value = new MintCream();
      return MintCream;
  })();
  var MistyRose = (function () {
      function MistyRose() {

      };
      MistyRose.value = new MistyRose();
      return MistyRose;
  })();
  var Moccasin = (function () {
      function Moccasin() {

      };
      Moccasin.value = new Moccasin();
      return Moccasin;
  })();
  var NavajoWhite = (function () {
      function NavajoWhite() {

      };
      NavajoWhite.value = new NavajoWhite();
      return NavajoWhite;
  })();
  var Navy = (function () {
      function Navy() {

      };
      Navy.value = new Navy();
      return Navy;
  })();
  var OldLace = (function () {
      function OldLace() {

      };
      OldLace.value = new OldLace();
      return OldLace;
  })();
  var Olive = (function () {
      function Olive() {

      };
      Olive.value = new Olive();
      return Olive;
  })();
  var OliveDrab = (function () {
      function OliveDrab() {

      };
      OliveDrab.value = new OliveDrab();
      return OliveDrab;
  })();
  var Orange = (function () {
      function Orange() {

      };
      Orange.value = new Orange();
      return Orange;
  })();
  var OrangeRed = (function () {
      function OrangeRed() {

      };
      OrangeRed.value = new OrangeRed();
      return OrangeRed;
  })();
  var Orchid = (function () {
      function Orchid() {

      };
      Orchid.value = new Orchid();
      return Orchid;
  })();
  var PaleGoldenRod = (function () {
      function PaleGoldenRod() {

      };
      PaleGoldenRod.value = new PaleGoldenRod();
      return PaleGoldenRod;
  })();
  var PaleGreen = (function () {
      function PaleGreen() {

      };
      PaleGreen.value = new PaleGreen();
      return PaleGreen;
  })();
  var PaleTurquoise = (function () {
      function PaleTurquoise() {

      };
      PaleTurquoise.value = new PaleTurquoise();
      return PaleTurquoise;
  })();
  var PaleVioletRed = (function () {
      function PaleVioletRed() {

      };
      PaleVioletRed.value = new PaleVioletRed();
      return PaleVioletRed;
  })();
  var PapayaWhip = (function () {
      function PapayaWhip() {

      };
      PapayaWhip.value = new PapayaWhip();
      return PapayaWhip;
  })();
  var PeachPuff = (function () {
      function PeachPuff() {

      };
      PeachPuff.value = new PeachPuff();
      return PeachPuff;
  })();
  var Peru = (function () {
      function Peru() {

      };
      Peru.value = new Peru();
      return Peru;
  })();
  var Pink = (function () {
      function Pink() {

      };
      Pink.value = new Pink();
      return Pink;
  })();
  var Plum = (function () {
      function Plum() {

      };
      Plum.value = new Plum();
      return Plum;
  })();
  var PowderBlue = (function () {
      function PowderBlue() {

      };
      PowderBlue.value = new PowderBlue();
      return PowderBlue;
  })();
  var Purple = (function () {
      function Purple() {

      };
      Purple.value = new Purple();
      return Purple;
  })();
  var RebeccaPurple = (function () {
      function RebeccaPurple() {

      };
      RebeccaPurple.value = new RebeccaPurple();
      return RebeccaPurple;
  })();
  var Red = (function () {
      function Red() {

      };
      Red.value = new Red();
      return Red;
  })();
  var RosyBrown = (function () {
      function RosyBrown() {

      };
      RosyBrown.value = new RosyBrown();
      return RosyBrown;
  })();
  var RoyalBlue = (function () {
      function RoyalBlue() {

      };
      RoyalBlue.value = new RoyalBlue();
      return RoyalBlue;
  })();
  var SaddleBrown = (function () {
      function SaddleBrown() {

      };
      SaddleBrown.value = new SaddleBrown();
      return SaddleBrown;
  })();
  var Salmon = (function () {
      function Salmon() {

      };
      Salmon.value = new Salmon();
      return Salmon;
  })();
  var SandyBrown = (function () {
      function SandyBrown() {

      };
      SandyBrown.value = new SandyBrown();
      return SandyBrown;
  })();
  var SeaGreen = (function () {
      function SeaGreen() {

      };
      SeaGreen.value = new SeaGreen();
      return SeaGreen;
  })();
  var SeaShell = (function () {
      function SeaShell() {

      };
      SeaShell.value = new SeaShell();
      return SeaShell;
  })();
  var Sienna = (function () {
      function Sienna() {

      };
      Sienna.value = new Sienna();
      return Sienna;
  })();
  var Silver = (function () {
      function Silver() {

      };
      Silver.value = new Silver();
      return Silver;
  })();
  var SkyBlue = (function () {
      function SkyBlue() {

      };
      SkyBlue.value = new SkyBlue();
      return SkyBlue;
  })();
  var SlateBlue = (function () {
      function SlateBlue() {

      };
      SlateBlue.value = new SlateBlue();
      return SlateBlue;
  })();
  var SlateGray = (function () {
      function SlateGray() {

      };
      SlateGray.value = new SlateGray();
      return SlateGray;
  })();
  var SlateGrey = (function () {
      function SlateGrey() {

      };
      SlateGrey.value = new SlateGrey();
      return SlateGrey;
  })();
  var Snow = (function () {
      function Snow() {

      };
      Snow.value = new Snow();
      return Snow;
  })();
  var SpringGreen = (function () {
      function SpringGreen() {

      };
      SpringGreen.value = new SpringGreen();
      return SpringGreen;
  })();
  var SteelBlue = (function () {
      function SteelBlue() {

      };
      SteelBlue.value = new SteelBlue();
      return SteelBlue;
  })();
  var Tan = (function () {
      function Tan() {

      };
      Tan.value = new Tan();
      return Tan;
  })();
  var Teal = (function () {
      function Teal() {

      };
      Teal.value = new Teal();
      return Teal;
  })();
  var Thistle = (function () {
      function Thistle() {

      };
      Thistle.value = new Thistle();
      return Thistle;
  })();
  var Tomato = (function () {
      function Tomato() {

      };
      Tomato.value = new Tomato();
      return Tomato;
  })();
  var Turquoise = (function () {
      function Turquoise() {

      };
      Turquoise.value = new Turquoise();
      return Turquoise;
  })();
  var Violet = (function () {
      function Violet() {

      };
      Violet.value = new Violet();
      return Violet;
  })();
  var Wheat = (function () {
      function Wheat() {

      };
      Wheat.value = new Wheat();
      return Wheat;
  })();
  var White = (function () {
      function White() {

      };
      White.value = new White();
      return White;
  })();
  var WhiteSmoke = (function () {
      function WhiteSmoke() {

      };
      WhiteSmoke.value = new WhiteSmoke();
      return WhiteSmoke;
  })();
  var Yellow = (function () {
      function Yellow() {

      };
      Yellow.value = new Yellow();
      return Yellow;
  })();
  var YellowGreen = (function () {
      function YellowGreen() {

      };
      YellowGreen.value = new YellowGreen();
      return YellowGreen;
  })();
  var colors = [ AliceBlue.value, AntiqueWhite.value, Aqua.value, Aquamarine.value, Azure.value, Beige.value, Bisque.value, Black.value, BlanchedAlmond.value, Blue.value, BlueViolet.value, Brown.value, BurlyWood.value, CadetBlue.value, Chartreuse.value, Chocolate.value, Coral.value, CornflowerBlue.value, Cornsilk.value, Crimson.value, Cyan.value, DarkBlue.value, DarkCyan.value, DarkGoldenRod.value, DarkGray.value, DarkGrey.value, DarkGreen.value, DarkKhaki.value, DarkMagenta.value, DarkOliveGreen.value, DarkOrange.value, DarkOrchid.value, DarkRed.value, DarkSalmon.value, DarkSeaGreen.value, DarkSlateBlue.value, DarkSlateGray.value, DarkSlateGrey.value, DarkTurquoise.value, DarkViolet.value, DeepPink.value, DeepSkyBlue.value, DimGray.value, DimGrey.value, DodgerBlue.value, FireBrick.value, FloralWhite.value, ForestGreen.value, Fuchsia.value, Gainsboro.value, GhostWhite.value, Gold.value, GoldenRod.value, Gray.value, Grey.value, Green.value, GreenYellow.value, HoneyDew.value, HotPink.value, IndianRed.value, Indigo.value, Ivory.value, Khaki.value, Lavender.value, LavenderBlush.value, LawnGreen.value, LemonChiffon.value, LightBlue.value, LightCoral.value, LightCyan.value, LightGoldenRodYellow.value, LightGray.value, LightGrey.value, LightGreen.value, LightPink.value, LightSalmon.value, LightSeaGreen.value, LightSkyBlue.value, LightSlateGray.value, LightSlateGrey.value, LightSteelBlue.value, LightYellow.value, Lime.value, LimeGreen.value, Linen.value, Magenta.value, Maroon.value, MediumAquaMarine.value, MediumBlue.value, MediumOrchid.value, MediumPurple.value, MediumSeaGreen.value, MediumSlateBlue.value, MediumSpringGreen.value, MediumTurquoise.value, MediumVioletRed.value, MidnightBlue.value, MintCream.value, MistyRose.value, Moccasin.value, NavajoWhite.value, Navy.value, OldLace.value, Olive.value, OliveDrab.value, Orange.value, OrangeRed.value, Orchid.value, PaleGoldenRod.value, PaleGreen.value, PaleTurquoise.value, PaleVioletRed.value, PapayaWhip.value, PeachPuff.value, Peru.value, Pink.value, Plum.value, PowderBlue.value, Purple.value, RebeccaPurple.value, Red.value, RosyBrown.value, RoyalBlue.value, SaddleBrown.value, Salmon.value, SandyBrown.value, SeaGreen.value, SeaShell.value, Sienna.value, Silver.value, SkyBlue.value, SlateBlue.value, SlateGray.value, SlateGrey.value, Snow.value, SpringGreen.value, SteelBlue.value, Tan.value, Teal.value, Thistle.value, Tomato.value, Turquoise.value, Violet.value, Wheat.value, White.value, WhiteSmoke.value, Yellow.value, YellowGreen.value ];
  var colorToCode = function (v) {
      if (v instanceof AliceBlue) {
          return "#F0F8FF";
      };
      if (v instanceof AntiqueWhite) {
          return "#FAEBD7";
      };
      if (v instanceof Aqua) {
          return "#00FFFF";
      };
      if (v instanceof Aquamarine) {
          return "#7FFFD4";
      };
      if (v instanceof Azure) {
          return "#F0FFFF";
      };
      if (v instanceof Beige) {
          return "#F5F5DC";
      };
      if (v instanceof Bisque) {
          return "#FFE4C4";
      };
      if (v instanceof Black) {
          return "#000000";
      };
      if (v instanceof BlanchedAlmond) {
          return "#FFEBCD";
      };
      if (v instanceof Blue) {
          return "#0000FF";
      };
      if (v instanceof BlueViolet) {
          return "#8A2BE2";
      };
      if (v instanceof Brown) {
          return "#A52A2A";
      };
      if (v instanceof BurlyWood) {
          return "#DEB887";
      };
      if (v instanceof CadetBlue) {
          return "#5F9EA0";
      };
      if (v instanceof Chartreuse) {
          return "#7FFF00";
      };
      if (v instanceof Chocolate) {
          return "#D2691E";
      };
      if (v instanceof Coral) {
          return "#FF7F50";
      };
      if (v instanceof CornflowerBlue) {
          return "#6495ED";
      };
      if (v instanceof Cornsilk) {
          return "#FFF8DC";
      };
      if (v instanceof Crimson) {
          return "#DC143C";
      };
      if (v instanceof Cyan) {
          return "#00FFFF";
      };
      if (v instanceof DarkBlue) {
          return "#00008B";
      };
      if (v instanceof DarkCyan) {
          return "#008B8B";
      };
      if (v instanceof DarkGoldenRod) {
          return "#B8860B";
      };
      if (v instanceof DarkGray) {
          return "#A9A9A9";
      };
      if (v instanceof DarkGrey) {
          return "#A9A9A9";
      };
      if (v instanceof DarkGreen) {
          return "#006400";
      };
      if (v instanceof DarkKhaki) {
          return "#BDB76B";
      };
      if (v instanceof DarkMagenta) {
          return "#8B008B";
      };
      if (v instanceof DarkOliveGreen) {
          return "#556B2F";
      };
      if (v instanceof DarkOrange) {
          return "#FF8C00";
      };
      if (v instanceof DarkOrchid) {
          return "#9932CC";
      };
      if (v instanceof DarkRed) {
          return "#8B0000";
      };
      if (v instanceof DarkSalmon) {
          return "#E9967A";
      };
      if (v instanceof DarkSeaGreen) {
          return "#8FBC8F";
      };
      if (v instanceof DarkSlateBlue) {
          return "#483D8B";
      };
      if (v instanceof DarkSlateGray) {
          return "#2F4F4F";
      };
      if (v instanceof DarkSlateGrey) {
          return "#2F4F4F";
      };
      if (v instanceof DarkTurquoise) {
          return "#00CED1";
      };
      if (v instanceof DarkViolet) {
          return "#9400D3";
      };
      if (v instanceof DeepPink) {
          return "#FF1493";
      };
      if (v instanceof DeepSkyBlue) {
          return "#00BFFF";
      };
      if (v instanceof DimGray) {
          return "#696969";
      };
      if (v instanceof DimGrey) {
          return "#696969";
      };
      if (v instanceof DodgerBlue) {
          return "#1E90FF";
      };
      if (v instanceof FireBrick) {
          return "#B22222";
      };
      if (v instanceof FloralWhite) {
          return "#FFFAF0";
      };
      if (v instanceof ForestGreen) {
          return "#228B22";
      };
      if (v instanceof Fuchsia) {
          return "#FF00FF";
      };
      if (v instanceof Gainsboro) {
          return "#DCDCDC";
      };
      if (v instanceof GhostWhite) {
          return "#F8F8FF";
      };
      if (v instanceof Gold) {
          return "#FFD700";
      };
      if (v instanceof GoldenRod) {
          return "#DAA520";
      };
      if (v instanceof Gray) {
          return "#808080";
      };
      if (v instanceof Grey) {
          return "#808080";
      };
      if (v instanceof Green) {
          return "#008000";
      };
      if (v instanceof GreenYellow) {
          return "#ADFF2F";
      };
      if (v instanceof HoneyDew) {
          return "#F0FFF0";
      };
      if (v instanceof HotPink) {
          return "#FF69B4";
      };
      if (v instanceof IndianRed) {
          return "#CD5C5C";
      };
      if (v instanceof Indigo) {
          return "#4B0082";
      };
      if (v instanceof Ivory) {
          return "#FFFFF0";
      };
      if (v instanceof Khaki) {
          return "#F0E68C";
      };
      if (v instanceof Lavender) {
          return "#E6E6FA";
      };
      if (v instanceof LavenderBlush) {
          return "#FFF0F5";
      };
      if (v instanceof LawnGreen) {
          return "#7CFC00";
      };
      if (v instanceof LemonChiffon) {
          return "#FFFACD";
      };
      if (v instanceof LightBlue) {
          return "#ADD8E6";
      };
      if (v instanceof LightCoral) {
          return "#F08080";
      };
      if (v instanceof LightCyan) {
          return "#E0FFFF";
      };
      if (v instanceof LightGoldenRodYellow) {
          return "#FAFAD2";
      };
      if (v instanceof LightGray) {
          return "#D3D3D3";
      };
      if (v instanceof LightGrey) {
          return "#D3D3D3";
      };
      if (v instanceof LightGreen) {
          return "#90EE90";
      };
      if (v instanceof LightPink) {
          return "#FFB6C1";
      };
      if (v instanceof LightSalmon) {
          return "#FFA07A";
      };
      if (v instanceof LightSeaGreen) {
          return "#20B2AA";
      };
      if (v instanceof LightSkyBlue) {
          return "#87CEFA";
      };
      if (v instanceof LightSlateGray) {
          return "#778899";
      };
      if (v instanceof LightSlateGrey) {
          return "#778899";
      };
      if (v instanceof LightSteelBlue) {
          return "#B0C4DE";
      };
      if (v instanceof LightYellow) {
          return "#FFFFE0";
      };
      if (v instanceof Lime) {
          return "#00FF00";
      };
      if (v instanceof LimeGreen) {
          return "#32CD32";
      };
      if (v instanceof Linen) {
          return "#FAF0E6";
      };
      if (v instanceof Magenta) {
          return "#FF00FF";
      };
      if (v instanceof Maroon) {
          return "#800000";
      };
      if (v instanceof MediumAquaMarine) {
          return "#66CDAA";
      };
      if (v instanceof MediumBlue) {
          return "#0000CD";
      };
      if (v instanceof MediumOrchid) {
          return "#BA55D3";
      };
      if (v instanceof MediumPurple) {
          return "#9370DB";
      };
      if (v instanceof MediumSeaGreen) {
          return "#3CB371";
      };
      if (v instanceof MediumSlateBlue) {
          return "#7B68EE";
      };
      if (v instanceof MediumSpringGreen) {
          return "#00FA9A";
      };
      if (v instanceof MediumTurquoise) {
          return "#48D1CC";
      };
      if (v instanceof MediumVioletRed) {
          return "#C71585";
      };
      if (v instanceof MidnightBlue) {
          return "#191970";
      };
      if (v instanceof MintCream) {
          return "#F5FFFA";
      };
      if (v instanceof MistyRose) {
          return "#FFE4E1";
      };
      if (v instanceof Moccasin) {
          return "#FFE4B5";
      };
      if (v instanceof NavajoWhite) {
          return "#FFDEAD";
      };
      if (v instanceof Navy) {
          return "#000080";
      };
      if (v instanceof OldLace) {
          return "#FDF5E6";
      };
      if (v instanceof Olive) {
          return "#808000";
      };
      if (v instanceof OliveDrab) {
          return "#6B8E23";
      };
      if (v instanceof Orange) {
          return "#FFA500";
      };
      if (v instanceof OrangeRed) {
          return "#FF4500";
      };
      if (v instanceof Orchid) {
          return "#DA70D6";
      };
      if (v instanceof PaleGoldenRod) {
          return "#EEE8AA";
      };
      if (v instanceof PaleGreen) {
          return "#98FB98";
      };
      if (v instanceof PaleTurquoise) {
          return "#AFEEEE";
      };
      if (v instanceof PaleVioletRed) {
          return "#DB7093";
      };
      if (v instanceof PapayaWhip) {
          return "#FFEFD5";
      };
      if (v instanceof PeachPuff) {
          return "#FFDAB9";
      };
      if (v instanceof Peru) {
          return "#CD853F";
      };
      if (v instanceof Pink) {
          return "#FFC0CB";
      };
      if (v instanceof Plum) {
          return "#DDA0DD";
      };
      if (v instanceof PowderBlue) {
          return "#B0E0E6";
      };
      if (v instanceof Purple) {
          return "#800080";
      };
      if (v instanceof RebeccaPurple) {
          return "#663399";
      };
      if (v instanceof Red) {
          return "#FF0000";
      };
      if (v instanceof RosyBrown) {
          return "#BC8F8F";
      };
      if (v instanceof RoyalBlue) {
          return "#4169E1";
      };
      if (v instanceof SaddleBrown) {
          return "#8B4513";
      };
      if (v instanceof Salmon) {
          return "#FA8072";
      };
      if (v instanceof SandyBrown) {
          return "#F4A460";
      };
      if (v instanceof SeaGreen) {
          return "#2E8B57";
      };
      if (v instanceof SeaShell) {
          return "#FFF5EE";
      };
      if (v instanceof Sienna) {
          return "#A0522D";
      };
      if (v instanceof Silver) {
          return "#C0C0C0";
      };
      if (v instanceof SkyBlue) {
          return "#87CEEB";
      };
      if (v instanceof SlateBlue) {
          return "#6A5ACD";
      };
      if (v instanceof SlateGray) {
          return "#708090";
      };
      if (v instanceof SlateGrey) {
          return "#708090";
      };
      if (v instanceof Snow) {
          return "#FFFAFA";
      };
      if (v instanceof SpringGreen) {
          return "#00FF7F";
      };
      if (v instanceof SteelBlue) {
          return "#4682B4";
      };
      if (v instanceof Tan) {
          return "#D2B48C";
      };
      if (v instanceof Teal) {
          return "#008080";
      };
      if (v instanceof Thistle) {
          return "#D8BFD8";
      };
      if (v instanceof Tomato) {
          return "#FF6347";
      };
      if (v instanceof Turquoise) {
          return "#40E0D0";
      };
      if (v instanceof Violet) {
          return "#EE82EE";
      };
      if (v instanceof Wheat) {
          return "#F5DEB3";
      };
      if (v instanceof White) {
          return "#FFFFFF";
      };
      if (v instanceof WhiteSmoke) {
          return "#F5F5F5";
      };
      if (v instanceof Yellow) {
          return "#FFFF00";
      };
      if (v instanceof YellowGreen) {
          return "#9ACD32";
      };
      throw new Error("Failed pattern match at Emo8.Data.Color (line 153, column 1 - line 153, column 31): " + [ v.constructor.name ]);
  };
  exports["AliceBlue"] = AliceBlue;
  exports["AntiqueWhite"] = AntiqueWhite;
  exports["Aqua"] = Aqua;
  exports["Aquamarine"] = Aquamarine;
  exports["Azure"] = Azure;
  exports["Beige"] = Beige;
  exports["Bisque"] = Bisque;
  exports["Black"] = Black;
  exports["BlanchedAlmond"] = BlanchedAlmond;
  exports["Blue"] = Blue;
  exports["BlueViolet"] = BlueViolet;
  exports["Brown"] = Brown;
  exports["BurlyWood"] = BurlyWood;
  exports["CadetBlue"] = CadetBlue;
  exports["Chartreuse"] = Chartreuse;
  exports["Chocolate"] = Chocolate;
  exports["Coral"] = Coral;
  exports["CornflowerBlue"] = CornflowerBlue;
  exports["Cornsilk"] = Cornsilk;
  exports["Crimson"] = Crimson;
  exports["Cyan"] = Cyan;
  exports["DarkBlue"] = DarkBlue;
  exports["DarkCyan"] = DarkCyan;
  exports["DarkGoldenRod"] = DarkGoldenRod;
  exports["DarkGray"] = DarkGray;
  exports["DarkGrey"] = DarkGrey;
  exports["DarkGreen"] = DarkGreen;
  exports["DarkKhaki"] = DarkKhaki;
  exports["DarkMagenta"] = DarkMagenta;
  exports["DarkOliveGreen"] = DarkOliveGreen;
  exports["DarkOrange"] = DarkOrange;
  exports["DarkOrchid"] = DarkOrchid;
  exports["DarkRed"] = DarkRed;
  exports["DarkSalmon"] = DarkSalmon;
  exports["DarkSeaGreen"] = DarkSeaGreen;
  exports["DarkSlateBlue"] = DarkSlateBlue;
  exports["DarkSlateGray"] = DarkSlateGray;
  exports["DarkSlateGrey"] = DarkSlateGrey;
  exports["DarkTurquoise"] = DarkTurquoise;
  exports["DarkViolet"] = DarkViolet;
  exports["DeepPink"] = DeepPink;
  exports["DeepSkyBlue"] = DeepSkyBlue;
  exports["DimGray"] = DimGray;
  exports["DimGrey"] = DimGrey;
  exports["DodgerBlue"] = DodgerBlue;
  exports["FireBrick"] = FireBrick;
  exports["FloralWhite"] = FloralWhite;
  exports["ForestGreen"] = ForestGreen;
  exports["Fuchsia"] = Fuchsia;
  exports["Gainsboro"] = Gainsboro;
  exports["GhostWhite"] = GhostWhite;
  exports["Gold"] = Gold;
  exports["GoldenRod"] = GoldenRod;
  exports["Gray"] = Gray;
  exports["Grey"] = Grey;
  exports["Green"] = Green;
  exports["GreenYellow"] = GreenYellow;
  exports["HoneyDew"] = HoneyDew;
  exports["HotPink"] = HotPink;
  exports["IndianRed"] = IndianRed;
  exports["Indigo"] = Indigo;
  exports["Ivory"] = Ivory;
  exports["Khaki"] = Khaki;
  exports["Lavender"] = Lavender;
  exports["LavenderBlush"] = LavenderBlush;
  exports["LawnGreen"] = LawnGreen;
  exports["LemonChiffon"] = LemonChiffon;
  exports["LightBlue"] = LightBlue;
  exports["LightCoral"] = LightCoral;
  exports["LightCyan"] = LightCyan;
  exports["LightGoldenRodYellow"] = LightGoldenRodYellow;
  exports["LightGray"] = LightGray;
  exports["LightGrey"] = LightGrey;
  exports["LightGreen"] = LightGreen;
  exports["LightPink"] = LightPink;
  exports["LightSalmon"] = LightSalmon;
  exports["LightSeaGreen"] = LightSeaGreen;
  exports["LightSkyBlue"] = LightSkyBlue;
  exports["LightSlateGray"] = LightSlateGray;
  exports["LightSlateGrey"] = LightSlateGrey;
  exports["LightSteelBlue"] = LightSteelBlue;
  exports["LightYellow"] = LightYellow;
  exports["Lime"] = Lime;
  exports["LimeGreen"] = LimeGreen;
  exports["Linen"] = Linen;
  exports["Magenta"] = Magenta;
  exports["Maroon"] = Maroon;
  exports["MediumAquaMarine"] = MediumAquaMarine;
  exports["MediumBlue"] = MediumBlue;
  exports["MediumOrchid"] = MediumOrchid;
  exports["MediumPurple"] = MediumPurple;
  exports["MediumSeaGreen"] = MediumSeaGreen;
  exports["MediumSlateBlue"] = MediumSlateBlue;
  exports["MediumSpringGreen"] = MediumSpringGreen;
  exports["MediumTurquoise"] = MediumTurquoise;
  exports["MediumVioletRed"] = MediumVioletRed;
  exports["MidnightBlue"] = MidnightBlue;
  exports["MintCream"] = MintCream;
  exports["MistyRose"] = MistyRose;
  exports["Moccasin"] = Moccasin;
  exports["NavajoWhite"] = NavajoWhite;
  exports["Navy"] = Navy;
  exports["OldLace"] = OldLace;
  exports["Olive"] = Olive;
  exports["OliveDrab"] = OliveDrab;
  exports["Orange"] = Orange;
  exports["OrangeRed"] = OrangeRed;
  exports["Orchid"] = Orchid;
  exports["PaleGoldenRod"] = PaleGoldenRod;
  exports["PaleGreen"] = PaleGreen;
  exports["PaleTurquoise"] = PaleTurquoise;
  exports["PaleVioletRed"] = PaleVioletRed;
  exports["PapayaWhip"] = PapayaWhip;
  exports["PeachPuff"] = PeachPuff;
  exports["Peru"] = Peru;
  exports["Pink"] = Pink;
  exports["Plum"] = Plum;
  exports["PowderBlue"] = PowderBlue;
  exports["Purple"] = Purple;
  exports["RebeccaPurple"] = RebeccaPurple;
  exports["Red"] = Red;
  exports["RosyBrown"] = RosyBrown;
  exports["RoyalBlue"] = RoyalBlue;
  exports["SaddleBrown"] = SaddleBrown;
  exports["Salmon"] = Salmon;
  exports["SandyBrown"] = SandyBrown;
  exports["SeaGreen"] = SeaGreen;
  exports["SeaShell"] = SeaShell;
  exports["Sienna"] = Sienna;
  exports["Silver"] = Silver;
  exports["SkyBlue"] = SkyBlue;
  exports["SlateBlue"] = SlateBlue;
  exports["SlateGray"] = SlateGray;
  exports["SlateGrey"] = SlateGrey;
  exports["Snow"] = Snow;
  exports["SpringGreen"] = SpringGreen;
  exports["SteelBlue"] = SteelBlue;
  exports["Tan"] = Tan;
  exports["Teal"] = Teal;
  exports["Thistle"] = Thistle;
  exports["Tomato"] = Tomato;
  exports["Turquoise"] = Turquoise;
  exports["Violet"] = Violet;
  exports["Wheat"] = Wheat;
  exports["White"] = White;
  exports["WhiteSmoke"] = WhiteSmoke;
  exports["Yellow"] = Yellow;
  exports["YellowGreen"] = YellowGreen;
  exports["colorToCode"] = colorToCode;
  exports["colors"] = colors;
})(PS["Emo8.Data.Color"] = PS["Emo8.Data.Color"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Emoji = function (x) {
      return x;
  };                         
  var zanyFace = "\ud83e\udd2a";
  var showEmoji = new Data_Show.Show(function (v) {
      return v;
  });                            
  var roastedSweetPotato = "\ud83c\udf60";
  var musicalKeyboard = "\ud83c\udfb9";
  var japaneseVacancyButton = "\ud83c\ude33";
  var infinity = "\u267e\ufe0f"; 
  var hatchingChick = "\ud83d\udc23";
  var eqEmoji = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  exports["Emoji"] = Emoji;
  exports["zanyFace"] = zanyFace;
  exports["hatchingChick"] = hatchingChick;
  exports["roastedSweetPotato"] = roastedSweetPotato;
  exports["musicalKeyboard"] = musicalKeyboard;
  exports["infinity"] = infinity;
  exports["japaneseVacancyButton"] = japaneseVacancyButton;
  exports["showEmoji"] = showEmoji;
  exports["eqEmoji"] = eqEmoji;
})(PS["Emo8.Data.Emoji"] = PS["Emo8.Data.Emoji"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Gen = PS["Control.Monad.Gen"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Emo8_Data_Color = PS["Emo8.Data.Color"];
  var Emo8_Data_Emoji = PS["Emo8.Data.Emoji"];
  var Emo8_Types = PS["Emo8.Types"];
  var Prelude = PS["Prelude"];                 
  var Normal = (function () {
      function Normal() {

      };
      Normal.value = new Normal();
      return Normal;
  })();
  var Mirrored = (function () {
      function Mirrored() {

      };
      Mirrored.value = new Mirrored();
      return Mirrored;
  })();
  var ClearScreen = (function () {
      function ClearScreen(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ClearScreen.create = function (value0) {
          return function (value1) {
              return new ClearScreen(value0, value1);
          };
      };
      return ClearScreen;
  })();
  var Emo = (function () {
      function Emo(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      Emo.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new Emo(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return Emo;
  })();
  var Emor = (function () {
      function Emor(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Emor.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Emor(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Emor;
  })();
  var Emap = (function () {
      function Emap(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      Emap.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new Emap(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return Emap;
  })();
  var emo = function (e) {
      return function (size) {
          return function (x) {
              return function (y) {
                  return Control_Monad_Free.liftF(new Emo(Normal.value, e, size, x, y, Data_Unit.unit));
              };
          };
      };
  };
  var cls = function (c) {
      return Control_Monad_Free.liftF(new ClearScreen(c, Data_Unit.unit));
  };
  exports["ClearScreen"] = ClearScreen;
  exports["Emo"] = Emo;
  exports["Emor"] = Emor;
  exports["Emap"] = Emap;
  exports["Normal"] = Normal;
  exports["Mirrored"] = Mirrored;
  exports["cls"] = cls;
  exports["emo"] = emo;
})(PS["Emo8.Action.Draw"] = PS["Emo8.Action.Draw"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var CH1 = (function () {
      function CH1() {

      };
      CH1.value = new CH1();
      return CH1;
  })();
  var CH2 = (function () {
      function CH2() {

      };
      CH2.value = new CH2();
      return CH2;
  })();
  var CH3 = (function () {
      function CH3() {

      };
      CH3.value = new CH3();
      return CH3;
  })();
  var CH4 = (function () {
      function CH4() {

      };
      CH4.value = new CH4();
      return CH4;
  })();
  var channels = [ CH1.value, CH2.value, CH3.value, CH4.value ];
  exports["CH1"] = CH1;
  exports["CH2"] = CH2;
  exports["CH3"] = CH3;
  exports["CH4"] = CH4;
  exports["channels"] = channels;
})(PS["Emo8.Data.Channel"] = PS["Emo8.Data.Channel"] || {});
(function(exports) {
    "use strict";

  exports.createPeriodicWaveImpl = function (fftc) {
      return function (ctx) {
          return function () {
              const reals = fftc.map(function(e) { return e.real });
              const imags = fftc.map(function(e) { return e.imag });
              return ctx.createPeriodicWave(Float32Array.from(reals), Float32Array.from(imags));
          }
      }
  };

  exports.setPeriodicWaveImpl = function (wave) {
      return function (node) {
          return function () {
              node.setPeriodicWave(wave);
          }
      }
  };
})(PS["Emo8.FFI.OscillatorCustom"] = PS["Emo8.FFI.OscillatorCustom"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Emo8.FFI.OscillatorCustom"];
  var Audio_WebAudio_Types = PS["Audio.WebAudio.Types"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];                 
  var setPeriodicWave = $foreign.setPeriodicWaveImpl;
  var createPeriodicWave = $foreign.createPeriodicWaveImpl;
  exports["createPeriodicWave"] = createPeriodicWave;
  exports["setPeriodicWave"] = setPeriodicWave;
})(PS["Emo8.FFI.OscillatorCustom"] = PS["Emo8.FFI.OscillatorCustom"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Audio_WebAudio_Oscillator = PS["Audio.WebAudio.Oscillator"];
  var Audio_WebAudio_Types = PS["Audio.WebAudio.Types"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Array = PS["Data.Array"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Effect = PS["Effect"];
  var Effect_Random = PS["Effect.Random"];
  var Emo8_FFI_OscillatorCustom = PS["Emo8.FFI.OscillatorCustom"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];                 
  var Sin = (function () {
      function Sin() {

      };
      Sin.value = new Sin();
      return Sin;
  })();
  var Sq = (function () {
      function Sq() {

      };
      Sq.value = new Sq();
      return Sq;
  })();
  var Tri = (function () {
      function Tri() {

      };
      Tri.value = new Tri();
      return Tri;
  })();
  var Saw = (function () {
      function Saw() {

      };
      Saw.value = new Saw();
      return Saw;
  })();
  var Noise = (function () {
      function Noise() {

      };
      Noise.value = new Noise();
      return Noise;
  })();
  var extendToComplex = function (rad) {
      return {
          real: $$Math.cos(rad),
          imag: $$Math.sin(rad)
      };
  };
  var whiteNoise = function (rads) {
      return Data_Array.cons({
          real: 0.0,
          imag: 0.0
      })(Data_Functor.map(Data_Functor.functorArray)(extendToComplex)(rads));
  };
  var setTone = function (v) {
      return function (on) {
          return function (v1) {
              if (v instanceof Sin) {
                  return Audio_WebAudio_Oscillator.setOscillatorType(Audio_WebAudio_Oscillator.Sine.value)(on);
              };
              if (v instanceof Sq) {
                  return Audio_WebAudio_Oscillator.setOscillatorType(Audio_WebAudio_Oscillator.Square.value)(on);
              };
              if (v instanceof Tri) {
                  return Audio_WebAudio_Oscillator.setOscillatorType(Audio_WebAudio_Oscillator.Triangle.value)(on);
              };
              if (v instanceof Saw) {
                  return Audio_WebAudio_Oscillator.setOscillatorType(Audio_WebAudio_Oscillator.Sawtooth.value)(on);
              };
              if (v instanceof Noise) {
                  return function __do() {
                      var v2 = Data_Unfoldable.replicateA(Effect.applicativeEffect)(Data_Unfoldable.unfoldableArray)(Data_Traversable.traversableArray)(31)(Effect_Random.randomRange(0.0)(2.0 * $$Math.pi))();
                      var v3 = Emo8_FFI_OscillatorCustom.createPeriodicWave(whiteNoise(v2))(v1)();
                      return Emo8_FFI_OscillatorCustom.setPeriodicWave(v3)(on)();
                  };
              };
              throw new Error("Failed pattern match at Emo8.Data.Tone (line 33, column 1 - line 33, column 65): " + [ v.constructor.name, on.constructor.name, v1.constructor.name ]);
          };
      };
  };
  exports["Sin"] = Sin;
  exports["Sq"] = Sq;
  exports["Tri"] = Tri;
  exports["Saw"] = Saw;
  exports["Noise"] = Noise;
  exports["setTone"] = setTone;
})(PS["Emo8.Data.Tone"] = PS["Emo8.Data.Tone"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Emo8_Data_Channel = PS["Emo8.Data.Channel"];
  var Emo8_Data_Tone = PS["Emo8.Data.Tone"];
  var Emo8_Types = PS["Emo8.Types"];
  var Prelude = PS["Prelude"];                 
  var Play = (function () {
      function Play(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Play.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Play(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Play;
  })();
  var Halt = (function () {
      function Halt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Halt.create = function (value0) {
          return function (value1) {
              return new Halt(value0, value1);
          };
      };
      return Halt;
  })();
  var HaltAll = (function () {
      function HaltAll(value0) {
          this.value0 = value0;
      };
      HaltAll.create = function (value0) {
          return new HaltAll(value0);
      };
      return HaltAll;
  })();
  var play = function (ch) {
      return function (sId) {
          return function (tone) {
              return function (tempo) {
                  return Control_Monad_Free.liftF(new Play(ch, sId, tone, tempo, Data_Unit.unit));
              };
          };
      };
  };
  exports["Play"] = Play;
  exports["Halt"] = Halt;
  exports["HaltAll"] = HaltAll;
  exports["play"] = play;
})(PS["Emo8.Action.Sound"] = PS["Emo8.Action.Sound"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Gen = PS["Control.Monad.Gen"];
  var Data_Array = PS["Data.Array"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Emo8_Data_Emoji = PS["Emo8.Data.Emoji"];
  var Emo8_Types = PS["Emo8.Types"];
  var Prelude = PS["Prelude"];                 
  var RandomInt = (function () {
      function RandomInt(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RandomInt.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RandomInt(value0, value1, value2);
              };
          };
      };
      return RandomInt;
  })();
  var RandomNumber = (function () {
      function RandomNumber(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RandomNumber.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RandomNumber(value0, value1, value2);
              };
          };
      };
      return RandomNumber;
  })();
  var IsMapCollide = (function () {
      function IsMapCollide(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      IsMapCollide.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new IsMapCollide(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return IsMapCollide;
  })();
  var randomInt = function (min) {
      return function (max) {
          return Control_Monad_Free.liftF(new RandomInt(min, max, Control_Category.identity(Control_Category.categoryFn)));
      };
  };
  var randomElement = function (xs) {
      var max = Data_Array.length(xs) - 1 | 0;
      return Data_Functor.map(Control_Monad_Free.freeFunctor)(Data_Array.index(xs))(randomInt(0)(max));
  };
  exports["RandomInt"] = RandomInt;
  exports["RandomNumber"] = RandomNumber;
  exports["IsMapCollide"] = IsMapCollide;
  exports["randomInt"] = randomInt;
  exports["randomElement"] = randomElement;
})(PS["Emo8.Action.Update"] = PS["Emo8.Action.Update"] || {});
(function(exports) {// module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };


  exports.applySig = function(fun) {
    return function(sig) {
      var out = make(fun.get()(sig.get()));
      var produce = function() { out.set(fun.get()(sig.get())); };
      fun.subscribe(produce);
      sig.subscribe(produce);
      return out;
    };
  };

  exports.foldp = function(fun) {
    return function(seed) {
      return function(sig) {
        var acc = seed;
        var out = make(acc);
        sig.subscribe(function(val) {
          acc = fun(val)(acc);
          out.set(acc);
        });
        return out;
      };
    };
  };

  exports.sampleOn = function(sig1) {
    return function(sig2) {
      var out = make(sig2.get());
      sig1.subscribe(function() {
        out.set(sig2.get());
      });
      return out;
    };
  };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };

  exports.get = function(sig) {
    return function() {
      return sig.get();
    };
  };
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var functorSignal = new Data_Functor.Functor($foreign.mapSig);
  var applySignal = new Control_Apply.Apply(function () {
      return functorSignal;
  }, $foreign.applySig);
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["constant"] = $foreign.constant;
  exports["foldp"] = $foreign.foldp;
  exports["sampleOn"] = $foreign.sampleOn;
  exports["runSignal"] = $foreign.runSignal;
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Effect = PS["Effect"];
  var Signal = PS["Signal"];                 
  var Input = function (poll) {
      this.poll = poll;
  };
  var poll = function (dict) {
      return dict.poll;
  };
  exports["poll"] = poll;
  exports["Input"] = Input;
})(PS["Emo8.Class.Input"] = PS["Emo8.Class.Input"] || {});
(function(exports) {// module Signal.DOM

  exports.keyPressedP =
    function keyPressedP(constant) {
      return function(keyCode) {
        return function() {
          var out = constant(false);
          window.addEventListener("keydown", function(e) {
            if (e.keyCode === keyCode) out.set(true);
          });
          window.addEventListener("keyup", function(e) {
            if (e.keyCode === keyCode) out.set(false);
          });
          return out;
        };
      };
    };

  exports.touchP =
    function touchP(constant) {
      var out = constant([]);
      function report(e) {
        var touches = [], i, l = e.touches.length;
        for (i = 0; i < l; i++) touches.push(e.touches.item(i));
        out.set(touches);
      }
      window.addEventListener("touchstart", report);
      window.addEventListener("touchend", report);
      window.addEventListener("touchmove", report);
      window.addEventListener("touchcancel", report);
      return function() {
        return out;
      };
    };

  exports.animationFrameP =
    function animationFrameP(constant) {
      return function(now) {
        return function() {
          var requestAnimFrame, cancelAnimFrame;
          if (window.requestAnimationFrame) {
            requestAnimFrame = window.requestAnimationFrame;
            cancelAnimFrame = window.cancelAnimationFrame;
          } else if (window.mozRequestAnimationFrame) {
            requestAnimFrame = window.mozRequestAnimationFrame;
            cancelAnimFrame = window.mozCancelAnimationFrame;
          } else if (window.webkitRequestAnimationFrame) {
            requestAnimFrame = window.webkitRequestAnimationFrame;
            cancelAnimFrame = window.webkitCancelAnimationFrame;
          } else if (window.msRequestAnimationFrame) {
            requestAnimFrame = window.msRequestAnimationFrame;
            cancelAnimFrame = window.msCancelAnimationFrame;
          } else if (window.oRequestAnimationFrame) {
            requestAnimFrame = window.oRequestAnimationFrame;
            cancelAnimFrame = window.oCancelAnimationFrame;
          } else {
            requestAnimFrame = function(cb) {setTimeout(function() {cb(now())}, 1000/60)};
            cancelAnimFrame = window.clearTimeout;
          }
          var out = constant(now());
          requestAnimFrame(function tick(t) {
            out.set(t); requestAnimFrame(tick);
          });
          return out;
        };
      };
    };

  exports.windowDimensionsP = function windowDimensionsP(constant) {
    var out = constant({ w: window.innerWidth, h: window.innerHeight });
    window.addEventListener("resize", function() {
      out.set({ w: window.innerWidth, h: window.innerHeight });
    });
    return function() {
      return out;
    }
  }
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {// module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Signal.Time"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  exports["now"] = $foreign.now;
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Signal.DOM"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];
  var windowDimensions = $foreign.windowDimensionsP(Signal.constant);
  var touch = $foreign.touchP(Signal.constant);
  var keyPressed = $foreign.keyPressedP(Signal.constant);
  var animationFrame = $foreign.animationFrameP(Signal.constant)(Signal_Time.now);
  exports["animationFrame"] = animationFrame;
  exports["keyPressed"] = keyPressed;
  exports["touch"] = touch;
  exports["windowDimensions"] = windowDimensions;
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Effect = PS["Effect"];
  var Emo8_Class_Input = PS["Emo8.Class.Input"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_DOM = PS["Signal.DOM"];                 
  var KeyInput = function (x) {
      return x;
  };
  var Left = (function () {
      function Left() {

      };
      Left.value = new Left();
      return Left;
  })();
  var Right = (function () {
      function Right() {

      };
      Right.value = new Right();
      return Right;
  })();
  var Up = (function () {
      function Up() {

      };
      Up.value = new Up();
      return Up;
  })();
  var Down = (function () {
      function Down() {

      };
      Down.value = new Down();
      return Down;
  })();
  var W = (function () {
      function W() {

      };
      W.value = new W();
      return W;
  })();
  var A = (function () {
      function A() {

      };
      A.value = new A();
      return A;
  })();
  var S = (function () {
      function S() {

      };
      S.value = new S();
      return S;
  })();
  var D = (function () {
      function D() {

      };
      D.value = new D();
      return D;
  })();
  var keyToCodeNum = function (v) {
      if (v instanceof Left) {
          return 37;
      };
      if (v instanceof Right) {
          return 39;
      };
      if (v instanceof Up) {
          return 38;
      };
      if (v instanceof Down) {
          return 40;
      };
      if (v instanceof W) {
          return 87;
      };
      if (v instanceof A) {
          return 65;
      };
      if (v instanceof S) {
          return 83;
      };
      if (v instanceof D) {
          return 68;
      };
      throw new Error("Failed pattern match at Emo8.Data.KeyInput (line 56, column 1 - line 56, column 27): " + [ v.constructor.name ]);
  };
  var inputKeyInput = new Emo8_Class_Input.Input((function () {
      var mkSignal = function ($26) {
          return Signal_DOM.keyPressed(keyToCodeNum($26));
      };
      return function __do() {
          var v = mkSignal(Left.value)();
          var v1 = mkSignal(Right.value)();
          var v2 = mkSignal(Up.value)();
          var v3 = mkSignal(Down.value)();
          var v4 = mkSignal(W.value)();
          var v5 = mkSignal(A.value)();
          var v6 = mkSignal(S.value)();
          var v7 = mkSignal(D.value)();
          return Data_Functor.map(Signal.functorSignal)(KeyInput)(Control_Apply.apply(Signal.applySignal)(Control_Apply.apply(Signal.applySignal)(Control_Apply.apply(Signal.applySignal)(Control_Apply.apply(Signal.applySignal)(Control_Apply.apply(Signal.applySignal)(Control_Apply.apply(Signal.applySignal)(Control_Apply.apply(Signal.applySignal)(Data_Functor.map(Signal.functorSignal)(function (v8) {
              return function (v9) {
                  return function (v10) {
                      return function (v11) {
                          return function (v12) {
                              return function (v13) {
                                  return function (v14) {
                                      return function (v15) {
                                          return {
                                              isLeft: v8,
                                              isRight: v9,
                                              isUp: v10,
                                              isDown: v11,
                                              isW: v12,
                                              isA: v13,
                                              isS: v14,
                                              isD: v15
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          })(v))(v1))(v2))(v3))(v4))(v5))(v6))(v7));
      };
  })());
  exports["KeyInput"] = KeyInput;
  exports["inputKeyInput"] = inputKeyInput;
})(PS["Emo8.Data.KeyInput"] = PS["Emo8.Data.KeyInput"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Effect = PS["Effect"];
  var Emo8_Class_Input = PS["Emo8.Class.Input"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_DOM = PS["Signal.DOM"];                 
  var TouchData = function (x) {
      return x;
  };
  var touchToPos = function (t) {
      return {
          x: t.screenX,
          y: -t.screenY | 0
      };
  };
  var pickTouchPosF = function (op) {
      return function (dp) {
          return function (ts) {
              var f = function (p) {
                  return op(p.x)(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(dp.w)(2));
              };
              return Data_Array.head(Data_Array.filter(f)(Data_Functor.map(Data_Functor.functorArray)(touchToPos)(ts)));
          };
      };
  };
  var pickRightTouchPos = pickTouchPosF(Data_Ord.greaterThan(Data_Ord.ordInt));
  var pickLeftTouchPos = pickTouchPosF(Data_Ord.lessThan(Data_Ord.ordInt));
  var inputTouchData = new Emo8_Class_Input.Input(function __do() {
      var v = Signal_DOM.touch();
      var v1 = Signal_DOM.windowDimensions();
      var rightPosSig = Control_Apply.apply(Signal.applySignal)(Data_Functor.map(Signal.functorSignal)(pickRightTouchPos)(v1))(v);
      var leftPosSig = Control_Apply.apply(Signal.applySignal)(Data_Functor.map(Signal.functorSignal)(pickLeftTouchPos)(v1))(v);
      return Data_Functor.map(Signal.functorSignal)(TouchData)(Control_Apply.apply(Signal.applySignal)(Data_Functor.map(Signal.functorSignal)(function (v2) {
          return function (v3) {
              return {
                  leftPos: v2,
                  rightPos: v3
              };
          };
      })(leftPosSig))(rightPosSig));
  });
  exports["TouchData"] = TouchData;
  exports["inputTouchData"] = inputTouchData;
})(PS["Emo8.Data.TouchData"] = PS["Emo8.Data.TouchData"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Emo8_Data_TouchData = PS["Emo8.Data.TouchData"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];                 
  var Northwest = (function () {
      function Northwest() {

      };
      Northwest.value = new Northwest();
      return Northwest;
  })();
  var North = (function () {
      function North() {

      };
      North.value = new North();
      return North;
  })();
  var Northeast = (function () {
      function Northeast() {

      };
      Northeast.value = new Northeast();
      return Northeast;
  })();
  var West = (function () {
      function West() {

      };
      West.value = new West();
      return West;
  })();
  var NoDirection = (function () {
      function NoDirection() {

      };
      NoDirection.value = new NoDirection();
      return NoDirection;
  })();
  var East = (function () {
      function East() {

      };
      East.value = new East();
      return East;
  })();
  var Southwest = (function () {
      function Southwest() {

      };
      Southwest.value = new Southwest();
      return Southwest;
  })();
  var South = (function () {
      function South() {

      };
      South.value = new South();
      return South;
  })();
  var Southeast = (function () {
      function Southeast() {

      };
      Southeast.value = new Southeast();
      return Southeast;
  })();
  var vectorToDirection = function (v) {
      var f = function (rad) {
          if (rad === 0.0) {
              return NoDirection.value;
          };
          if (rad < ($$Math.pi * -7.0) / 8.0 || rad >= ($$Math.pi * 7.0) / 8.0) {
              return West.value;
          };
          if (rad < ($$Math.pi * -5.0) / 8.0) {
              return Southwest.value;
          };
          if (rad < ($$Math.pi * -3.0) / 8.0) {
              return South.value;
          };
          if (rad < ($$Math.pi * -1.0) / 8.0) {
              return Southeast.value;
          };
          if (rad < ($$Math.pi * 1.0) / 8.0) {
              return East.value;
          };
          if (rad < ($$Math.pi * 3.0) / 8.0) {
              return Northeast.value;
          };
          if (rad < ($$Math.pi * 5.0) / 8.0) {
              return North.value;
          };
          if (rad < ($$Math.pi * 7.0) / 8.0) {
              return Northwest.value;
          };
          if (Data_Boolean.otherwise) {
              return NoDirection.value;
          };
          throw new Error("Failed pattern match at Emo8.Data.TouchDirection (line 28, column 5 - line 38, column 33): " + [ rad.constructor.name ]);
      };
      var arg = $$Math.atan2(Data_Int.toNumber(v.vy))(Data_Int.toNumber(v.vx));
      return f(arg);
  };
  var eqTouchDirection = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Northwest && y instanceof Northwest) {
              return true;
          };
          if (x instanceof North && y instanceof North) {
              return true;
          };
          if (x instanceof Northeast && y instanceof Northeast) {
              return true;
          };
          if (x instanceof West && y instanceof West) {
              return true;
          };
          if (x instanceof NoDirection && y instanceof NoDirection) {
              return true;
          };
          if (x instanceof East && y instanceof East) {
              return true;
          };
          if (x instanceof Southwest && y instanceof Southwest) {
              return true;
          };
          if (x instanceof South && y instanceof South) {
              return true;
          };
          if (x instanceof Southeast && y instanceof Southeast) {
              return true;
          };
          return false;
      };
  });
  var diffVector = function (v) {
      return function (v1) {
          return {
              vx: v.x - v1.x | 0,
              vy: v.y - v1.y | 0
          };
      };
  };
  exports["Northwest"] = Northwest;
  exports["North"] = North;
  exports["Northeast"] = Northeast;
  exports["West"] = West;
  exports["NoDirection"] = NoDirection;
  exports["East"] = East;
  exports["Southwest"] = Southwest;
  exports["South"] = South;
  exports["Southeast"] = Southeast;
  exports["vectorToDirection"] = vectorToDirection;
  exports["diffVector"] = diffVector;
  exports["eqTouchDirection"] = eqTouchDirection;
})(PS["Emo8.Data.TouchDirection"] = PS["Emo8.Data.TouchDirection"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Effect = PS["Effect"];
  var Emo8_Class_Input = PS["Emo8.Class.Input"];
  var Emo8_Data_TouchData = PS["Emo8.Data.TouchData"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var updateBasePos = function (bp) {
      return function (tp) {
          if (bp instanceof Data_Maybe.Just && tp instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(bp.value0);
          };
          if (bp instanceof Data_Maybe.Just && tp instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
          };
          if (bp instanceof Data_Maybe.Nothing) {
              return tp;
          };
          throw new Error("Failed pattern match at Emo8.Data.TouchState (line 42, column 23 - line 45, column 18): " + [ bp.constructor.name, tp.constructor.name ]);
      };
  };
  var updateTouchState = function (v) {
      return function (v1) {
          var nextRightBasePos = updateBasePos(v1.rightBasePos)(v.rightPos);
          var nextLeftBasePos = updateBasePos(v1.leftBasePos)(v.leftPos);
          return {
              leftBasePos: nextLeftBasePos,
              rightBasePos: nextRightBasePos
          };
      };
  };
  var initialTouchState = {
      leftBasePos: Data_Maybe.Nothing.value,
      rightBasePos: Data_Maybe.Nothing.value
  };
  var mkTouchStateSig = Signal.foldp(updateTouchState)(initialTouchState);
  var inputTouchState = new Emo8_Class_Input.Input(function __do() {
      var v = Emo8_Class_Input.poll(Emo8_Data_TouchData.inputTouchData)();
      return mkTouchStateSig(v);
  });
  exports["inputTouchState"] = inputTouchState;
})(PS["Emo8.Data.TouchState"] = PS["Emo8.Data.TouchState"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Effect = PS["Effect"];
  var Emo8_Class_Input = PS["Emo8.Class.Input"];
  var Emo8_Data_TouchData = PS["Emo8.Data.TouchData"];
  var Emo8_Data_TouchDirection = PS["Emo8.Data.TouchDirection"];
  var Emo8_Data_TouchState = PS["Emo8.Data.TouchState"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var mkTouchInput = function (v) {
      return function (v1) {
          var mRightVec = Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Emo8_Data_TouchDirection.diffVector)(v.rightPos))(v1.rightBasePos);
          var rightDir = Data_Maybe.fromMaybe(Emo8_Data_TouchDirection.NoDirection.value)(Data_Functor.map(Data_Maybe.functorMaybe)(Emo8_Data_TouchDirection.vectorToDirection)(mRightVec));
          var mLeftVec = Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Emo8_Data_TouchDirection.diffVector)(v.leftPos))(v1.leftBasePos);
          var leftDir = Data_Maybe.fromMaybe(Emo8_Data_TouchDirection.NoDirection.value)(Data_Functor.map(Data_Maybe.functorMaybe)(Emo8_Data_TouchDirection.vectorToDirection)(mLeftVec));
          return {
              isLeft: Data_Foldable.elem(Data_Foldable.foldableArray)(Emo8_Data_TouchDirection.eqTouchDirection)(rightDir)([ Emo8_Data_TouchDirection.Northwest.value, Emo8_Data_TouchDirection.West.value, Emo8_Data_TouchDirection.Southwest.value ]),
              isRight: Data_Foldable.elem(Data_Foldable.foldableArray)(Emo8_Data_TouchDirection.eqTouchDirection)(rightDir)([ Emo8_Data_TouchDirection.Southeast.value, Emo8_Data_TouchDirection.East.value, Emo8_Data_TouchDirection.Northeast.value ]),
              isUp: Data_Foldable.elem(Data_Foldable.foldableArray)(Emo8_Data_TouchDirection.eqTouchDirection)(rightDir)([ Emo8_Data_TouchDirection.Northwest.value, Emo8_Data_TouchDirection.North.value, Emo8_Data_TouchDirection.Northeast.value ]),
              isDown: Data_Foldable.elem(Data_Foldable.foldableArray)(Emo8_Data_TouchDirection.eqTouchDirection)(rightDir)([ Emo8_Data_TouchDirection.Southwest.value, Emo8_Data_TouchDirection.South.value, Emo8_Data_TouchDirection.Southeast.value ]),
              isW: Data_Foldable.elem(Data_Foldable.foldableArray)(Emo8_Data_TouchDirection.eqTouchDirection)(leftDir)([ Emo8_Data_TouchDirection.Northwest.value, Emo8_Data_TouchDirection.North.value, Emo8_Data_TouchDirection.Northeast.value ]),
              isA: Data_Foldable.elem(Data_Foldable.foldableArray)(Emo8_Data_TouchDirection.eqTouchDirection)(leftDir)([ Emo8_Data_TouchDirection.Northwest.value, Emo8_Data_TouchDirection.West.value, Emo8_Data_TouchDirection.Southwest.value ]),
              isS: Data_Foldable.elem(Data_Foldable.foldableArray)(Emo8_Data_TouchDirection.eqTouchDirection)(leftDir)([ Emo8_Data_TouchDirection.Southwest.value, Emo8_Data_TouchDirection.South.value, Emo8_Data_TouchDirection.Southeast.value ]),
              isD: Data_Foldable.elem(Data_Foldable.foldableArray)(Emo8_Data_TouchDirection.eqTouchDirection)(leftDir)([ Emo8_Data_TouchDirection.Southeast.value, Emo8_Data_TouchDirection.East.value, Emo8_Data_TouchDirection.Northeast.value ])
          };
      };
  };
  var inputTouchInput = new Emo8_Class_Input.Input(function __do() {
      var v = Emo8_Class_Input.poll(Emo8_Data_TouchData.inputTouchData)();
      var v1 = Emo8_Class_Input.poll(Emo8_Data_TouchState.inputTouchState)();
      return Control_Apply.apply(Signal.applySignal)(Data_Functor.map(Signal.functorSignal)(mkTouchInput)(v))(v1);
  });
  exports["inputTouchInput"] = inputTouchInput;
})(PS["Emo8.Data.TouchInput"] = PS["Emo8.Data.TouchInput"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Effect = PS["Effect"];
  var Emo8_Class_Input = PS["Emo8.Class.Input"];
  var Emo8_Data_KeyInput = PS["Emo8.Data.KeyInput"];
  var Emo8_Data_TouchInput = PS["Emo8.Data.TouchInput"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var mergeInput = function (v) {
      return function (v1) {
          return {
              isLeft: v.isLeft || v1.isLeft,
              isRight: v.isRight || v1.isRight,
              isUp: v.isUp || v1.isUp,
              isDown: v.isDown || v1.isDown,
              isW: v.isW || v1.isW,
              isA: v.isA || v1.isA,
              isS: v.isS || v1.isS,
              isD: v.isD || v1.isD
          };
      };
  };
  var inputKeyTouchInput = new Emo8_Class_Input.Input(function __do() {
      var v = Emo8_Class_Input.poll(Emo8_Data_KeyInput.inputKeyInput)();
      var v1 = Emo8_Class_Input.poll(Emo8_Data_TouchInput.inputTouchInput)();
      return Control_Apply.apply(Signal.applySignal)(Data_Functor.map(Signal.functorSignal)(mergeInput)(v))(v1);
  });
  var anyKeyTouch = function (v) {
      return v.isW || (v.isS || (v.isA || (v.isD || (v.isUp || (v.isDown || (v.isLeft || v.isRight))))));
  };
  exports["anyKeyTouch"] = anyKeyTouch;
  exports["inputKeyTouchInput"] = inputKeyTouchInput;
})(PS["Emo8.Data.KeyTouchInput"] = PS["Emo8.Data.KeyTouchInput"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Prelude = PS["Prelude"];                 
  var Pressed = (function () {
      function Pressed() {

      };
      Pressed.value = new Pressed();
      return Pressed;
  })();
  var Unpressed = (function () {
      function Unpressed() {

      };
      Unpressed.value = new Unpressed();
      return Unpressed;
  })();
  var Catched = (function () {
      function Catched() {

      };
      Catched.value = new Catched();
      return Catched;
  })();
  var Released = (function () {
      function Released() {

      };
      Released.value = new Released();
      return Released;
  })();
  var updatePressState = function (btn) {
      return function (ps) {
          if (btn && ps instanceof Unpressed) {
              return Catched.value;
          };
          if (btn && ps instanceof Catched) {
              return Pressed.value;
          };
          if (btn && ps instanceof Pressed) {
              return Pressed.value;
          };
          if (btn && ps instanceof Released) {
              return Catched.value;
          };
          if (!btn && ps instanceof Unpressed) {
              return Unpressed.value;
          };
          if (!btn && ps instanceof Catched) {
              return Released.value;
          };
          if (!btn && ps instanceof Pressed) {
              return Released.value;
          };
          if (!btn && ps instanceof Released) {
              return Unpressed.value;
          };
          throw new Error("Failed pattern match at Emo8.Data.PressState (line 17, column 3 - line 25, column 24): " + [ btn.constructor.name, ps.constructor.name ]);
      };
  };
  var eqPressState = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Pressed && y instanceof Pressed) {
              return true;
          };
          if (x instanceof Unpressed && y instanceof Unpressed) {
              return true;
          };
          if (x instanceof Catched && y instanceof Catched) {
              return true;
          };
          if (x instanceof Released && y instanceof Released) {
              return true;
          };
          return false;
      };
  });
  exports["Pressed"] = Pressed;
  exports["Unpressed"] = Unpressed;
  exports["Catched"] = Catched;
  exports["Released"] = Released;
  exports["updatePressState"] = updatePressState;
  exports["eqPressState"] = eqPressState;
})(PS["Emo8.Data.PressState"] = PS["Emo8.Data.PressState"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Emo8_Data_KeyTouchInput = PS["Emo8.Data.KeyTouchInput"];
  var Emo8_Data_PressState = PS["Emo8.Data.PressState"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];                 
  var updateInputState = function (v) {
      return function (s) {
          return {
              leftState: Emo8_Data_PressState.updatePressState(v.isLeft)(s.leftState),
              rightState: Emo8_Data_PressState.updatePressState(v.isRight)(s.rightState),
              upState: Emo8_Data_PressState.updatePressState(v.isUp)(s.upState),
              downState: Emo8_Data_PressState.updatePressState(v.isDown)(s.downState),
              wState: Emo8_Data_PressState.updatePressState(v.isW)(s.wState),
              aState: Emo8_Data_PressState.updatePressState(v.isA)(s.aState),
              sState: Emo8_Data_PressState.updatePressState(v.isS)(s.sState),
              dState: Emo8_Data_PressState.updatePressState(v.isD)(s.dState)
          };
      };
  };
  var mkInput = function (s) {
      var isReleased = Data_Eq.eq(Emo8_Data_PressState.eqPressState)(Emo8_Data_PressState.Released.value);
      var isOn = function (ps) {
          return Data_Eq.eq(Emo8_Data_PressState.eqPressState)(ps)(Emo8_Data_PressState.Catched.value) || Data_Eq.eq(Emo8_Data_PressState.eqPressState)(ps)(Emo8_Data_PressState.Pressed.value);
      };
      var isCatched = Data_Eq.eq(Emo8_Data_PressState.eqPressState)(Emo8_Data_PressState.Catched.value);
      return {
          isLeft: isOn(s.leftState),
          isRight: isOn(s.rightState),
          isUp: isOn(s.upState),
          isDown: isOn(s.downState),
          isW: isOn(s.wState),
          isA: isOn(s.aState),
          isS: isOn(s.sState),
          isD: isOn(s.dState),
          catched: {
              isLeft: isCatched(s.leftState),
              isRight: isCatched(s.rightState),
              isUp: isCatched(s.upState),
              isDown: isCatched(s.downState),
              isW: isCatched(s.wState),
              isA: isCatched(s.aState),
              isS: isCatched(s.sState),
              isD: isCatched(s.dState)
          },
          released: {
              isLeft: isReleased(s.leftState),
              isRight: isReleased(s.rightState),
              isUp: isReleased(s.upState),
              isDown: isReleased(s.downState),
              isW: isReleased(s.wState),
              isA: isReleased(s.aState),
              isS: isReleased(s.sState),
              isD: isReleased(s.dState)
          }
      };
  };
  var isCatchAny = function (i) {
      return i.catched.isW || (i.catched.isS || (i.catched.isA || (i.catched.isD || (i.catched.isUp || (i.catched.isDown || (i.catched.isLeft || i.catched.isRight))))));
  };
  var initialInputState = {
      leftState: Emo8_Data_PressState.Unpressed.value,
      rightState: Emo8_Data_PressState.Unpressed.value,
      upState: Emo8_Data_PressState.Unpressed.value,
      downState: Emo8_Data_PressState.Unpressed.value,
      wState: Emo8_Data_PressState.Unpressed.value,
      aState: Emo8_Data_PressState.Unpressed.value,
      sState: Emo8_Data_PressState.Unpressed.value,
      dState: Emo8_Data_PressState.Unpressed.value
  };
  var mkInputStateSig = Signal.foldp(updateInputState)(initialInputState);
  var mkInputSig = function ($3) {
      return Data_Functor.map(Signal.functorSignal)(mkInput)(mkInputStateSig($3));
  };
  exports["mkInputSig"] = mkInputSig;
  exports["isCatchAny"] = isCatchAny;
})(PS["Emo8.Input"] = PS["Emo8.Input"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Emo8_Action_Draw = PS["Emo8.Action.Draw"];
  var Emo8_Action_Sound = PS["Emo8.Action.Sound"];
  var Emo8_Action_Update = PS["Emo8.Action.Update"];
  var Emo8_Input = PS["Emo8.Input"];
  var Prelude = PS["Prelude"];                 
  var Game = function (draw, sound, update) {
      this.draw = draw;
      this.sound = sound;
      this.update = update;
  };
  var update = function (dict) {
      return dict.update;
  };
  var sound = function (dict) {
      return dict.sound;
  };
  var draw = function (dict) {
      return dict.draw;
  };
  exports["draw"] = draw;
  exports["sound"] = sound;
  exports["update"] = update;
  exports["Game"] = Game;
})(PS["Emo8.Class.Game"] = PS["Emo8.Class.Game"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Emo8_Class_Game = PS["Emo8.Class.Game"];                 
  var GameBoot = function (Game0, finished) {
      this.Game0 = Game0;
      this.finished = finished;
  };
  var finished = function (dict) {
      return dict.finished;
  };
  exports["finished"] = finished;
  exports["GameBoot"] = GameBoot;
})(PS["Emo8.Class.GameBoot"] = PS["Emo8.Class.GameBoot"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Prelude = PS["Prelude"];                 
  var Read = function (Show0, read) {
      this.Show0 = Show0;
      this.read = read;
  };
  var read = function (dict) {
      return dict.read;
  };
  exports["read"] = read;
  exports["Read"] = Read;
})(PS["Emo8.Class.Read"] = PS["Emo8.Class.Read"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var maxNoteSize = 5;
  var fontFamily = "sans-serif";
  var canvasId = "scene";
  exports["canvasId"] = canvasId;
  exports["fontFamily"] = fontFamily;
  exports["maxNoteSize"] = maxNoteSize;
})(PS["Emo8.Constants"] = PS["Emo8.Constants"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Emo8_Class_Read = PS["Emo8.Class.Read"];
  var Prelude = PS["Prelude"];                 
  var Mute = (function () {
      function Mute() {

      };
      Mute.value = new Mute();
      return Mute;
  })();
  var Low = (function () {
      function Low() {

      };
      Low.value = new Low();
      return Low;
  })();
  var Med = (function () {
      function Med() {

      };
      Med.value = new Med();
      return Med;
  })();
  var High = (function () {
      function High() {

      };
      High.value = new High();
      return High;
  })();
  var First = (function () {
      function First() {

      };
      First.value = new First();
      return First;
  })();
  var Second = (function () {
      function Second() {

      };
      Second.value = new Second();
      return Second;
  })();
  var Third = (function () {
      function Third() {

      };
      Third.value = new Third();
      return Third;
  })();
  var Fourth = (function () {
      function Fourth() {

      };
      Fourth.value = new Fourth();
      return Fourth;
  })();
  var Fifth = (function () {
      function Fifth() {

      };
      Fifth.value = new Fifth();
      return Fifth;
  })();
  var Sixth = (function () {
      function Sixth() {

      };
      Sixth.value = new Sixth();
      return Sixth;
  })();
  var Seventh = (function () {
      function Seventh() {

      };
      Seventh.value = new Seventh();
      return Seventh;
  })();
  var C = (function () {
      function C() {

      };
      C.value = new C();
      return C;
  })();
  var CS = (function () {
      function CS() {

      };
      CS.value = new CS();
      return CS;
  })();
  var D = (function () {
      function D() {

      };
      D.value = new D();
      return D;
  })();
  var DS = (function () {
      function DS() {

      };
      DS.value = new DS();
      return DS;
  })();
  var E = (function () {
      function E() {

      };
      E.value = new E();
      return E;
  })();
  var F = (function () {
      function F() {

      };
      F.value = new F();
      return F;
  })();
  var FS = (function () {
      function FS() {

      };
      FS.value = new FS();
      return FS;
  })();
  var G = (function () {
      function G() {

      };
      G.value = new G();
      return G;
  })();
  var GS = (function () {
      function GS() {

      };
      GS.value = new GS();
      return GS;
  })();
  var A = (function () {
      function A() {

      };
      A.value = new A();
      return A;
  })();
  var AS = (function () {
      function AS() {

      };
      AS.value = new AS();
      return AS;
  })();
  var B = (function () {
      function B() {

      };
      B.value = new B();
      return B;
  })();
  var None = (function () {
      function None() {

      };
      None.value = new None();
      return None;
  })();
  var Detune = (function () {
      function Detune() {

      };
      Detune.value = new Detune();
      return Detune;
  })();
  var volToGain = function (v) {
      if (v instanceof Mute) {
          return 0.0;
      };
      if (v instanceof Low) {
          return 0.33;
      };
      if (v instanceof Med) {
          return 0.67;
      };
      if (v instanceof High) {
          return 1.0;
      };
      throw new Error("Failed pattern match at Emo8.Data.Audio (line 112, column 1 - line 112, column 27): " + [ v.constructor.name ]);
  };
  var showVol = new Data_Show.Show(function (v) {
      if (v instanceof Mute) {
          return "\ud83d\udd07";
      };
      if (v instanceof Low) {
          return "\ud83d\udd08";
      };
      if (v instanceof Med) {
          return "\ud83d\udd09";
      };
      if (v instanceof High) {
          return "\ud83d\udd0a";
      };
      throw new Error("Failed pattern match at Emo8.Data.Audio (line 99, column 1 - line 99, column 29): " + [ v.constructor.name ]);
  });
  var showOctave = new Data_Show.Show(function (v) {
      if (v instanceof First) {
          return "1\ufe0f\u20e3";
      };
      if (v instanceof Second) {
          return "2\ufe0f\u20e3";
      };
      if (v instanceof Third) {
          return "3\ufe0f\u20e3";
      };
      if (v instanceof Fourth) {
          return "4\ufe0f\u20e3";
      };
      if (v instanceof Fifth) {
          return "5\ufe0f\u20e3";
      };
      if (v instanceof Sixth) {
          return "6\ufe0f\u20e3";
      };
      if (v instanceof Seventh) {
          return "7\ufe0f\u20e3";
      };
      throw new Error("Failed pattern match at Emo8.Data.Audio (line 57, column 1 - line 57, column 35): " + [ v.constructor.name ]);
  });
  var showEfct = new Data_Show.Show(function (v) {
      if (v instanceof None) {
          return "\ud83c\udfbc";
      };
      if (v instanceof Detune) {
          return "\ud83c\udf9b";
      };
      throw new Error("Failed pattern match at Emo8.Data.Audio (line 123, column 1 - line 123, column 31): " + [ v.constructor.name ]);
  });
  var readVol = new Emo8_Class_Read.Read(function () {
      return showVol;
  }, function (v) {
      if (v === "\ud83d\udd07") {
          return new Data_Either.Right(Mute.value);
      };
      if (v === "\ud83d\udd08") {
          return new Data_Either.Right(Low.value);
      };
      if (v === "\ud83d\udd09") {
          return new Data_Either.Right(Med.value);
      };
      if (v === "\ud83d\udd0a") {
          return new Data_Either.Right(High.value);
      };
      return Data_Either.Left.create(Data_String_Common.joinWith(" ")([ "Sorry.", v, "is not supported." ]));
  });
  var readOctave = new Emo8_Class_Read.Read(function () {
      return showOctave;
  }, function (v) {
      if (v === "1\ufe0f\u20e3") {
          return new Data_Either.Right(First.value);
      };
      if (v === "2\ufe0f\u20e3") {
          return new Data_Either.Right(Second.value);
      };
      if (v === "3\ufe0f\u20e3") {
          return new Data_Either.Right(Third.value);
      };
      if (v === "4\ufe0f\u20e3") {
          return new Data_Either.Right(Fourth.value);
      };
      if (v === "5\ufe0f\u20e3") {
          return new Data_Either.Right(Fifth.value);
      };
      if (v === "6\ufe0f\u20e3") {
          return new Data_Either.Right(Sixth.value);
      };
      if (v === "7\ufe0f\u20e3") {
          return new Data_Either.Right(Seventh.value);
      };
      return Data_Either.Left.create(Data_String_Common.joinWith(" ")([ "Sorry.", v, "is not supported." ]));
  });
  var readEfct = new Emo8_Class_Read.Read(function () {
      return showEfct;
  }, function (v) {
      if (v === "\ud83c\udfbc") {
          return new Data_Either.Right(None.value);
      };
      if (v === "\ud83c\udf9b") {
          return new Data_Either.Right(Detune.value);
      };
      return Data_Either.Left.create(Data_String_Common.joinWith(" ")([ "Sorry.", v, "is not supported." ]));
  });
  var octaveToMult = function (v) {
      if (v instanceof First) {
          return 1.0;
      };
      if (v instanceof Second) {
          return 2.0;
      };
      if (v instanceof Third) {
          return 4.0;
      };
      if (v instanceof Fourth) {
          return 8.0;
      };
      if (v instanceof Fifth) {
          return 16.0;
      };
      if (v instanceof Sixth) {
          return 32.0;
      };
      if (v instanceof Seventh) {
          return 64.0;
      };
      throw new Error("Failed pattern match at Emo8.Data.Audio (line 85, column 1 - line 85, column 33): " + [ v.constructor.name ]);
  };
  var notes = [ C.value, CS.value, D.value, DS.value, E.value, F.value, FS.value, G.value, GS.value, A.value, AS.value, B.value ];
  var noteToFreq = function (v) {
      if (v instanceof C) {
          return 32.7031956626;
      };
      if (v instanceof CS) {
          return 34.6478288721;
      };
      if (v instanceof D) {
          return 36.7080959897;
      };
      if (v instanceof DS) {
          return 38.8908729653;
      };
      if (v instanceof E) {
          return 41.2034446141;
      };
      if (v instanceof F) {
          return 43.6535289291;
      };
      if (v instanceof FS) {
          return 46.249302839;
      };
      if (v instanceof G) {
          return 48.9994294977;
      };
      if (v instanceof GS) {
          return 51.9130871975;
      };
      if (v instanceof A) {
          return 55.0;
      };
      if (v instanceof AS) {
          return 58.2704701898;
      };
      if (v instanceof B) {
          return 61.735412657;
      };
      throw new Error("Failed pattern match at Emo8.Data.Audio (line 37, column 1 - line 37, column 29): " + [ v.constructor.name ]);
  };
  var nextOctave = function (v) {
      if (v instanceof First) {
          return Second.value;
      };
      if (v instanceof Second) {
          return Third.value;
      };
      if (v instanceof Third) {
          return Fourth.value;
      };
      if (v instanceof Fourth) {
          return Fifth.value;
      };
      if (v instanceof Fifth) {
          return Sixth.value;
      };
      if (v instanceof Sixth) {
          return Seventh.value;
      };
      if (v instanceof Seventh) {
          return First.value;
      };
      throw new Error("Failed pattern match at Emo8.Data.Audio (line 76, column 1 - line 76, column 31): " + [ v.constructor.name ]);
  }; 
  var efctToDetune = function (v) {
      if (v instanceof None) {
          return 0.0;
      };
      if (v instanceof Detune) {
          return 50.0;
      };
      throw new Error("Failed pattern match at Emo8.Data.Audio (line 132, column 1 - line 132, column 31): " + [ v.constructor.name ]);
  };
  exports["C"] = C;
  exports["CS"] = CS;
  exports["D"] = D;
  exports["DS"] = DS;
  exports["E"] = E;
  exports["F"] = F;
  exports["FS"] = FS;
  exports["G"] = G;
  exports["GS"] = GS;
  exports["A"] = A;
  exports["AS"] = AS;
  exports["B"] = B;
  exports["notes"] = notes;
  exports["noteToFreq"] = noteToFreq;
  exports["First"] = First;
  exports["Second"] = Second;
  exports["Third"] = Third;
  exports["Fourth"] = Fourth;
  exports["Fifth"] = Fifth;
  exports["Sixth"] = Sixth;
  exports["Seventh"] = Seventh;
  exports["nextOctave"] = nextOctave;
  exports["octaveToMult"] = octaveToMult;
  exports["Mute"] = Mute;
  exports["Low"] = Low;
  exports["Med"] = Med;
  exports["High"] = High;
  exports["volToGain"] = volToGain;
  exports["None"] = None;
  exports["Detune"] = Detune;
  exports["efctToDetune"] = efctToDetune;
  exports["showOctave"] = showOctave;
  exports["readOctave"] = readOctave;
  exports["showVol"] = showVol;
  exports["readVol"] = readVol;
  exports["showEfct"] = showEfct;
  exports["readEfct"] = readEfct;
})(PS["Emo8.Data.Audio"] = PS["Emo8.Data.Audio"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Emo8_Data_Audio = PS["Emo8.Data.Audio"];                 
  var mkScale = function (o) {
      return function (n) {
          return {
              octave: o,
              note: n
          };
      };
  };
  var emptyTick = {
      scales: [  ],
      vol: Emo8_Data_Audio.Mute.value,
      efct: Emo8_Data_Audio.None.value
  };
  exports["emptyTick"] = emptyTick;
  exports["mkScale"] = mkScale;
})(PS["Emo8.Data.Tick"] = PS["Emo8.Data.Tick"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_EmojiSplitter = PS["Data.String.EmojiSplitter"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_String_Utils = PS["Data.String.Utils"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Emo8_Class_Read = PS["Emo8.Class.Read"];
  var Emo8_Constants = PS["Emo8.Constants"];
  var Emo8_Data_Audio = PS["Emo8.Data.Audio"];
  var Emo8_Data_Emoji = PS["Emo8.Data.Emoji"];
  var Emo8_Data_Tick = PS["Emo8.Data.Tick"];
  var Emo8_Types = PS["Emo8.Types"];
  var Prelude = PS["Prelude"];
  var stringMatrixToEmojiMap = (function () {
      var readEmoji = function ($74) {
          return Data_Either.Right.create(Emo8_Data_Emoji.Emoji($74));
      };
      return Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(readEmoji));
  })();
  var satisfyNoteLen = function (xs) {
      return function (ys) {
          var $29 = Data_Foldable.length(Data_Foldable.foldableArray)(Data_Semiring.semiringInt)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(ys)) <= Emo8_Constants.maxNoteSize;
          if ($29) {
              return Data_Either.Right.create(new Data_Tuple.Tuple(xs, ys));
          };
          return Data_Either.Left.create("exceeded max note count " + (Data_Show.show(Data_Show.showInt)(Emo8_Constants.maxNoteSize) + "."));
      };
  };
  var rawStringToSingletonArray = function (s) {
      var rows = Data_String_Utils.lines(s);
      var rows$prime = Data_Array.slice(1)(Data_Foldable.length(Data_Foldable.foldableArray)(Data_Semiring.semiringInt)(rows) - 1 | 0)(rows);
      return Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_String_EmojiSplitter.splitEmoji)(rows$prime);
  };
  var parseEmojiMap = function (v) {
      return Control_Bind.bindFlipped(Data_Either.bindEither)(stringMatrixToEmojiMap)(rawStringToSingletonArray(v));
  };
  var matchNote = function (n) {
      return function (s) {
          if (Data_Eq.eq(Emo8_Data_Emoji.eqEmoji)(s)(Emo8_Data_Emoji.musicalKeyboard)) {
              return new Data_Either.Right([ n ]);
          };
          if (Data_Eq.eq(Emo8_Data_Emoji.eqEmoji)(s)(Emo8_Data_Emoji.japaneseVacancyButton)) {
              return new Data_Either.Right([  ]);
          };
          if (Data_Boolean.otherwise) {
              return Data_Either.Left.create(s + " can not be parsed.");
          };
          throw new Error("Failed pattern match at Emo8.Parse (line 89, column 1 - line 89, column 60): " + [ n.constructor.name, s.constructor.name ]);
      };
  };
  var parseNotes = function ($75) {
      return Data_Functor.map(Data_Either.functorEither)(Data_Array.concat)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Tuple.uncurry(matchNote))(Data_Array.zip(Emo8_Data_Audio.notes)($75)));
  };
  var stringArrayToTick = function (v) {
      if (v.length === 27) {
          return Control_Bind.bind(Data_Either.bindEither)(Emo8_Class_Read.read(Emo8_Data_Audio.readEfct)(v[0]))(function (v1) {
              return Control_Bind.bind(Data_Either.bindEither)(Emo8_Class_Read.read(Emo8_Data_Audio.readVol)(v[1]))(function (v2) {
                  return Control_Bind.bind(Data_Either.bindEither)(Emo8_Class_Read.read(Emo8_Data_Audio.readOctave)(v[2]))(function (v3) {
                      return Control_Bind.bind(Data_Either.bindEither)(parseNotes([ v[3], v[4], v[5], v[6], v[7], v[8], v[9], v[10], v[11], v[12], v[13], v[14] ]))(function (v4) {
                          return Control_Bind.bind(Data_Either.bindEither)(parseNotes([ v[15], v[16], v[17], v[18], v[19], v[20], v[21], v[22], v[23], v[24], v[25], v[26] ]))(function (v5) {
                              return Control_Bind.bind(Data_Either.bindEither)(satisfyNoteLen(v4)(v5))(function (v6) {
                                  var scales = Data_Functor.map(Data_Functor.functorArray)(Emo8_Data_Tick.mkScale(v3))(v6.value0);
                                  var scales$prime = Data_Functor.map(Data_Functor.functorArray)(Emo8_Data_Tick.mkScale(Emo8_Data_Audio.nextOctave(v3)))(v6.value1);
                                  return Control_Applicative.pure(Data_Either.applicativeEither)({
                                      scales: Data_Semigroup.append(Data_Semigroup.semigroupArray)(scales)(scales$prime),
                                      vol: v2,
                                      efct: v1
                                  });
                              });
                          });
                      });
                  });
              });
          });
      };
      return new Data_Either.Left("invalid format.");
  };
  var stringMatrixToSound = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(stringArrayToTick);
  var parseSound = function (v) {
      return Control_Bind.bindFlipped(Data_Either.bindEither)(stringMatrixToSound)(rawStringToSingletonArray(v));
  };
  exports["parseEmojiMap"] = parseEmojiMap;
  exports["parseSound"] = parseSound;
})(PS["Emo8.Parse"] = PS["Emo8.Parse"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Emo8_Action_Draw = PS["Emo8.Action.Draw"];
  var Emo8_Action_Sound = PS["Emo8.Action.Sound"];
  var Emo8_Action_Update = PS["Emo8.Action.Update"];
  var Emo8_Class_Game = PS["Emo8.Class.Game"];
  var Emo8_Class_GameBoot = PS["Emo8.Class.GameBoot"];
  var Emo8_Data_Channel = PS["Emo8.Data.Channel"];
  var Emo8_Data_Color = PS["Emo8.Data.Color"];
  var Emo8_Data_Emoji = PS["Emo8.Data.Emoji"];
  var Emo8_Data_Tone = PS["Emo8.Data.Tone"];
  var Emo8_Input = PS["Emo8.Input"];
  var Emo8_Parse = PS["Emo8.Parse"];
  var Emo8_Types = PS["Emo8.Types"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];                 
  var Normal = (function () {
      function Normal() {

      };
      Normal.value = new Normal();
      return Normal;
  })();
  var Rare = (function () {
      function Rare() {

      };
      Rare.value = new Rare();
      return Rare;
  })();
  var State = (function () {
      function State(value0) {
          this.value0 = value0;
      };
      State.create = function (value0) {
          return new State(value0);
      };
      return State;
  })();
  var toEmoji = function (v) {
      if (v instanceof Normal) {
          return Emo8_Data_Emoji.infinity;
      };
      if (v instanceof Rare) {
          return Emo8_Data_Emoji.zanyFace;
      };
      throw new Error("Failed pattern match at Emo8.Boot (line 101, column 1 - line 101, column 30): " + [ v.constructor.name ]);
  };
  var ratioToSize = function (r) {
      return function (l) {
          return Data_Int.floor(r * Data_Int.toNumber(l));
      };
  };
  var minLength = function (ms) {
      if (ms.width < ms.height) {
          return ms.width;
      };
      if (Data_Boolean.otherwise) {
          return ms.height;
      };
      throw new Error("Failed pattern match at Emo8.Boot (line 105, column 1 - line 105, column 32): " + [ ms.constructor.name ]);
  };
  var isFinish = function (v) {
      return v.value0.wait <= 0;
  };
  var initialWait = 120;
  var initialBgColor = Emo8_Data_Color.Black.value;
  var initialState = function (ms) {
      var titleSize = ratioToSize(0.25)(minLength(ms));
      var emoSize = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(titleSize)(4);
      var calcBasePos = function (size) {
          return {
              x: Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(ms.width - size | 0)(2),
              y: Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(ms.height - size | 0)(2)
          };
      };
      return new State({
          titleSize: titleSize,
          titlePos: calcBasePos(titleSize),
          titleEmojiType: Normal.value,
          emoSize: emoSize,
          emoPos: calcBasePos(emoSize),
          bgColor: initialBgColor,
          wait: initialWait,
          frame: 0
      });
  };
  var fromPolar = function (pol) {
      var toRadian = function ($24) {
          return $$Math.pi * Data_Function.flip(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingNumber))(180.0)($24);
      };
      return {
          x: Data_Int.floor(pol.radius * $$Math.cos(toRadian(pol.theta))),
          y: Data_Int.floor(pol.radius * $$Math.sin(toRadian(pol.theta)))
      };
  };
  var gameState = new Emo8_Class_Game.Game(function (v) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Emo8_Action_Draw.cls(v.value0.bgColor))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Emo8_Action_Draw.emo(toEmoji(v.value0.titleEmojiType))(v.value0.titleSize)(v.value0.titlePos.x)(v.value0.titlePos.y))(function () {
              var rotBase = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v.value0.frame)(45);
              var facts = Data_Array.range(0)(7);
              var rots = Data_Functor.map(Data_Functor.functorArray)(function ($25) {
                  return Data_Function.flip(Data_Ring.sub(Data_Ring.ringInt))(rotBase)(45 * $25 | 0);
              })(facts);
              var pols = Data_Functor.map(Data_Functor.functorArray)(function (rot) {
                  return fromPolar({
                      radius: Data_Int.toNumber(v.value0.titleSize),
                      theta: Data_Int.toNumber(rot)
                  });
              })(rots);
              return Data_Foldable.for_(Control_Monad_Free.freeApplicative)(Data_Foldable.foldableArray)(pols)(function (pol) {
                  return Emo8_Action_Draw.emo(Emo8_Data_Emoji.roastedSweetPotato)(v.value0.emoSize)(v.value0.emoPos.x + pol.x | 0)(v.value0.emoPos.y + pol.y | 0);
              });
          });
      });
  }, function (v) {
      return Control_Applicative.when(Control_Monad_Free.freeApplicative)(v.value0.wait === (initialWait - 1 | 0))(Emo8_Action_Sound.play(Emo8_Data_Channel.CH1.value)(0)(Emo8_Data_Tone.Saw.value)(1024));
  }, function (i) {
      return function (v) {
          if (isFinish(v)) {
              return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(v);
          };
          if (Data_Boolean.otherwise) {
              var $19 = Emo8_Input.isCatchAny(i);
              if ($19) {
                  return Control_Bind.bind(Control_Monad_Free.freeBind)(Emo8_Action_Update.randomElement(Emo8_Data_Color.colors))(function (v1) {
                      return Control_Bind.bind(Control_Monad_Free.freeBind)(Emo8_Action_Update.randomInt(0)(19))(function (v2) {
                          return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(State.create({
                              titleSize: v.value0.titleSize,
                              titlePos: v.value0.titlePos,
                              titleEmojiType: (function () {
                                  var $22 = v2 === 0;
                                  if ($22) {
                                      return Rare.value;
                                  };
                                  return Normal.value;
                              })(),
                              emoSize: v.value0.emoSize,
                              emoPos: v.value0.emoPos,
                              bgColor: Data_Maybe.fromMaybe(initialBgColor)(v1),
                              wait: initialWait,
                              frame: v.value0.frame + 1 | 0
                          }));
                      });
                  });
              };
              return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(State.create({
                  titleSize: v.value0.titleSize,
                  titlePos: v.value0.titlePos,
                  titleEmojiType: v.value0.titleEmojiType,
                  emoSize: v.value0.emoSize,
                  emoPos: v.value0.emoPos,
                  bgColor: v.value0.bgColor,
                  wait: v.value0.wait - 1 | 0,
                  frame: v.value0.frame + 1 | 0
              }));
          };
          throw new Error("Failed pattern match at Emo8.Boot (line 46, column 1 - line 46, column 33): " + [ i.constructor.name, v.constructor.name ]);
      };
  });
  var gameBootState = new Emo8_Class_GameBoot.GameBoot(function () {
      return gameState;
  }, isFinish);
  var bootRawSound = "\x0a\ud83c\udfbc\ud83d\udd085\ufe0f\u20e3\ud83c\udfb9\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\x0a\ud83c\udfbc\ud83d\udd086\ufe0f\u20e3\ud83c\udfb9\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\x0a\ud83c\udfbc\ud83d\udd086\ufe0f\u20e3\ud83c\udfb9\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\x0a\ud83c\udfbc\ud83d\udd086\ufe0f\u20e3\ud83c\udfb9\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\ud83c\ude33\x0a";
  exports["initialState"] = initialState;
  exports["bootRawSound"] = bootRawSound;
  exports["gameState"] = gameState;
  exports["gameBootState"] = gameBootState;
})(PS["Emo8.Boot"] = PS["Emo8.Boot"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Effect = PS["Effect"];
  var Emo8_Class_Game = PS["Emo8.Class.Game"];
  var Emo8_Class_GameBoot = PS["Emo8.Class.GameBoot"];
  var Emo8_Input = PS["Emo8.Input"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];                 
  var GameWithBoot = (function () {
      function GameWithBoot(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GameWithBoot.create = function (value0) {
          return function (value1) {
              return new GameWithBoot(value0, value1);
          };
      };
      return GameWithBoot;
  })();
  var switchOp = function (dictGame) {
      return function (dictGameBoot) {
          return function (op) {
              return function (op$prime) {
                  return Data_Functor.map(Signal.functorSignal)(function (v) {
                      var $16 = Emo8_Class_GameBoot.finished(dictGameBoot)(v.value1);
                      if ($16) {
                          return op(v.value0);
                      };
                      return op$prime(v.value1);
                  });
              };
          };
      };
  };
  var bifunctorGameWithBoot = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new GameWithBoot(f(v.value0), g(v.value1));
          };
      };
  });
  var bifoldableGameWithBoot = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(g(v.value1));
              };
          };
      };
  }, function (f2) {
      return function (g2) {
          return function (u) {
              return function (v) {
                  return g2(f2(u)(v.value0))(v.value1);
              };
          };
      };
  }, function (f2) {
      return function (g2) {
          return function (u) {
              return function (v) {
                  return f2(v.value0)(g2(v.value1)(u));
              };
          };
      };
  });
  var bitraversableGameWithBoot = new Data_Bitraversable.Bitraversable(function () {
      return bifoldableGameWithBoot;
  }, function () {
      return bifunctorGameWithBoot;
  }, function (dictApplicative) {
      return function (v) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(GameWithBoot.create)(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(GameWithBoot.create)(f(v.value0)))(g(v.value1));
              };
          };
      };
  });
  var switchFoldOp = function (dictGame) {
      return function (dictGameBoot) {
          return function (op) {
              return function (op$prime) {
                  return function (i) {
                      return function (v) {
                          var $53 = Emo8_Class_GameBoot.finished(dictGameBoot)(v.value1);
                          if ($53) {
                              return Data_Bitraversable.bitraverse(bitraversableGameWithBoot)(Effect.applicativeEffect)(op(i))(Control_Applicative.pure(Effect.applicativeEffect))(v);
                          };
                          return Data_Bitraversable.bitraverse(bitraversableGameWithBoot)(Effect.applicativeEffect)(Control_Applicative.pure(Effect.applicativeEffect))(op$prime(i))(v);
                      };
                  };
              };
          };
      };
  };
  exports["GameWithBoot"] = GameWithBoot;
  exports["switchOp"] = switchOp;
  exports["switchFoldOp"] = switchFoldOp;
  exports["bifunctorGameWithBoot"] = bifunctorGameWithBoot;
  exports["bifoldableGameWithBoot"] = bifoldableGameWithBoot;
  exports["bitraversableGameWithBoot"] = bitraversableGameWithBoot;
})(PS["Emo8.Data.GameWithBoot"] = PS["Emo8.Data.GameWithBoot"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Effect_Exception = PS["Effect.Exception"];
  var Emo8_Types = PS["Emo8.Types"];
  var Prelude = PS["Prelude"];                 
  var providedSound = function (ss) {
      return function (sId) {
          return function (op) {
              var v = Data_Array.index(ss)(sId);
              if (v instanceof Data_Maybe.Nothing) {
                  return Effect_Exception["throw"]("SoundId " + (Data_Show.show(Data_Show.showInt)(sId) + " does not exist."));
              };
              if (v instanceof Data_Maybe.Just) {
                  return op(v.value0);
              };
              throw new Error("Failed pattern match at Emo8.Excepiton (line 24, column 3 - line 26, column 18): " + [ v.constructor.name ]);
          };
      };
  };
  var providedMap = function (ms) {
      return function (mId) {
          return function (op) {
              var v = Data_Array.index(ms)(mId);
              if (v instanceof Data_Maybe.Nothing) {
                  return Effect_Exception["throw"]("MapId " + (Data_Show.show(Data_Show.showInt)(mId) + " does not exist."));
              };
              if (v instanceof Data_Maybe.Just) {
                  return op(v.value0);
              };
              throw new Error("Failed pattern match at Emo8.Excepiton (line 18, column 3 - line 20, column 19): " + [ v.constructor.name ]);
          };
      };
  };
  var orErrMsg = function (v) {
      if (v instanceof Data_Either.Right) {
          return Control_Applicative.pure(Effect.applicativeEffect)(v.value0);
      };
      if (v instanceof Data_Either.Left) {
          return Effect_Exception["throw"](v.value0);
      };
      throw new Error("Failed pattern match at Emo8.Excepiton (line 12, column 1 - line 12, column 50): " + [ v.constructor.name ]);
  };
  exports["orErrMsg"] = orErrMsg;
  exports["providedMap"] = providedMap;
  exports["providedSound"] = providedSound;
})(PS["Emo8.Excepiton"] = PS["Emo8.Excepiton"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.setTextBaselineImpl = function (ctx) {
      return function (textBaseline) {
          return function () {
              ctx.textBaseline = textBaseline;
          }
      }
  };
})(PS["Emo8.FFI.TextBaseline"] = PS["Emo8.FFI.TextBaseline"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setCanvasWidth = function(canvas) {
      return function(width) {
          return function() {
              canvas.width = width;
          };
      };
  };

  exports.setCanvasHeight = function(canvas) {
      return function(height) {
          return function() {
              canvas.height = height;
          };
      };
  };

  exports.setFillStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.fillStyle = style;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.scale = function(ctx) {
      return function(t) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
          };
      };
  };

  exports.rotate = function(ctx) {
      return function(angle) {
          return function() {
              ctx.rotate(angle);
          };
      };
  };

  exports.translate = function(ctx) {
      return function(t) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
          };
      };
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(ctx) {
      return function(fontspec) {
          return function() {
              ctx.font = fontspec;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                  };
              };
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Effect_Exception_Unsafe = PS["Effect.Exception.Unsafe"];
  var Prelude = PS["Prelude"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["setCanvasWidth"] = $foreign.setCanvasWidth;
  exports["setCanvasHeight"] = $foreign.setCanvasHeight;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["fillRect"] = $foreign.fillRect;
  exports["scale"] = $foreign.scale;
  exports["rotate"] = $foreign.rotate;
  exports["translate"] = $foreign.translate;
  exports["setFont"] = $foreign.setFont;
  exports["fillText"] = $foreign.fillText;
  exports["save"] = $foreign.save;
  exports["restore"] = $foreign.restore;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Emo8.FFI.TextBaseline"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Effect_Exception_Unsafe = PS["Effect.Exception.Unsafe"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];                 
  var BaselineTop = (function () {
      function BaselineTop() {

      };
      BaselineTop.value = new BaselineTop();
      return BaselineTop;
  })();
  var BaselineHanging = (function () {
      function BaselineHanging() {

      };
      BaselineHanging.value = new BaselineHanging();
      return BaselineHanging;
  })();
  var BaselineMiddle = (function () {
      function BaselineMiddle() {

      };
      BaselineMiddle.value = new BaselineMiddle();
      return BaselineMiddle;
  })();
  var BaselineAlphabetic = (function () {
      function BaselineAlphabetic() {

      };
      BaselineAlphabetic.value = new BaselineAlphabetic();
      return BaselineAlphabetic;
  })();
  var BaselineIdeographic = (function () {
      function BaselineIdeographic() {

      };
      BaselineIdeographic.value = new BaselineIdeographic();
      return BaselineIdeographic;
  })();
  var BaselineBottom = (function () {
      function BaselineBottom() {

      };
      BaselineBottom.value = new BaselineBottom();
      return BaselineBottom;
  })();
  var setTextBaseline = function (ctx) {
      return function (textbaseline) {
          var toString = function (v) {
              if (v instanceof BaselineTop) {
                  return "top";
              };
              if (v instanceof BaselineHanging) {
                  return "hanging";
              };
              if (v instanceof BaselineMiddle) {
                  return "middle";
              };
              if (v instanceof BaselineAlphabetic) {
                  return "alphabetic";
              };
              if (v instanceof BaselineIdeographic) {
                  return "ideographic";
              };
              if (v instanceof BaselineBottom) {
                  return "bottom";
              };
              throw new Error("Failed pattern match at Emo8.FFI.TextBaseline (line 52, column 5 - line 53, column 5): " + [ v.constructor.name ]);
          };
          return $foreign.setTextBaselineImpl(ctx)(toString(textbaseline));
      };
  };
  exports["BaselineTop"] = BaselineTop;
  exports["BaselineHanging"] = BaselineHanging;
  exports["BaselineMiddle"] = BaselineMiddle;
  exports["BaselineAlphabetic"] = BaselineAlphabetic;
  exports["BaselineIdeographic"] = BaselineIdeographic;
  exports["BaselineBottom"] = BaselineBottom;
  exports["setTextBaseline"] = setTextBaseline;
})(PS["Emo8.FFI.TextBaseline"] = PS["Emo8.FFI.TextBaseline"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Emo8_Action_Draw = PS["Emo8.Action.Draw"];
  var Emo8_Constants = PS["Emo8.Constants"];
  var Emo8_Data_Color = PS["Emo8.Data.Color"];
  var Emo8_Data_Emoji = PS["Emo8.Data.Emoji"];
  var Emo8_Excepiton = PS["Emo8.Excepiton"];
  var Emo8_FFI_TextBaseline = PS["Emo8.FFI.TextBaseline"];
  var Emo8_Types = PS["Emo8.Types"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];                 
  var withLocalDraw = function (op) {
      return function (dctx) {
          return function __do() {
              Graphics_Canvas.save(dctx.ctx)();
              op(dctx)();
              return Graphics_Canvas.restore(dctx.ctx)();
          };
      };
  };
  var toBaseY = function (ms) {
      return function (y) {
          return ms.height - y | 0;
      };
  };
  var sizeToFont = function (px) {
      var fontSize = Data_Show.show(Data_Show.showInt)(px) + "px";
      return Data_String_Common.joinWith(" ")([ fontSize, Emo8_Constants.fontFamily ]);
  };
  var emapF = function (f) {
      return function (mId) {
          return function (size) {
              return function (x) {
                  return function (y) {
                      var yMapId = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(y)(size);
                      var ybBoundId = -(yMapId + 1 | 0) | 0;
                      var xMapId = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(x)(size);
                      var xlBoundId = -(xMapId + 1 | 0) | 0;
                      var withIndexRev = function (arr) {
                          return Data_Array.zip(Data_Array.range(Data_Array.length(arr) - 1 | 0)(0))(arr);
                      };
                      var withIndex = function (arr) {
                          return Data_Array.zip(Data_Array.range(0)(Data_Array.length(arr) - 1 | 0))(arr);
                      };
                      var maxMapElemY = function (ms) {
                          return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(ms.height)(size);
                      };
                      var ytBoundId = function (ms) {
                          return ybBoundId + maxMapElemY(ms) | 0;
                      };
                      var maxMapElemX = function (ms) {
                          return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(ms.width)(size);
                      };
                      var xrBoundId = function (ms) {
                          return xlBoundId + maxMapElemX(ms) | 0;
                      };
                      var isVisible = function (ms) {
                          return function (xId) {
                              return function (yId) {
                                  return xId >= xlBoundId && (xId <= xrBoundId(ms) && (yId >= ybBoundId && yId <= ytBoundId(ms)));
                              };
                          };
                      };
                      var emapWithIndex = function ($55) {
                          return withIndexRev(Data_Functor.map(Data_Functor.functorArray)(withIndex)($55));
                      };
                      return withLocalDraw(function (dctx) {
                          return Emo8_Excepiton.providedMap(dctx.mapData)(mId)(function (em) {
                              return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(emapWithIndex(em))(function (v) {
                                  return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(v.value1)(function (v1) {
                                      return Control_Applicative.when(Effect.applicativeEffect)(isVisible(dctx.monitorSize)(v1.value0)(v.value0))((function () {
                                          var yy = y + (size * v.value0 | 0) | 0;
                                          var xx = x + (size * v1.value0 | 0) | 0;
                                          return f(v1.value1)(size)(xx)(yy)(dctx);
                                      })());
                                  });
                              });
                          });
                      });
                  };
              };
          };
      };
  };
  var drawEmoji = function (e) {
      return function (size) {
          return function (x) {
              return function (y) {
                  return function (ctx) {
                      if (Data_Eq.eq(Emo8_Data_Emoji.eqEmoji)(e)(Emo8_Data_Emoji.japaneseVacancyButton)) {
                          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                      };
                      if (Data_Boolean.otherwise) {
                          var font = sizeToFont(size);
                          return function __do() {
                              Graphics_Canvas.setFont(ctx)(font)();
                              Emo8_FFI_TextBaseline.setTextBaseline(ctx)(Emo8_FFI_TextBaseline.BaselineIdeographic.value)();
                              Graphics_Canvas.setFillStyle(ctx)(Emo8_Data_Color.colorToCode(Emo8_Data_Color.Black.value))();
                              return Graphics_Canvas.fillText(ctx)(Data_Show.show(Emo8_Data_Emoji.showEmoji)(e))(x)(y)();
                          };
                      };
                      throw new Error("Failed pattern match at Emo8.Interpreter.Draw (line 56, column 1 - line 56, column 75): " + [ e.constructor.name, size.constructor.name, x.constructor.name, y.constructor.name, ctx.constructor.name ]);
                  };
              };
          };
      };
  };
  var drawEmojiWithTrans = function (e) {
      return function (size) {
          return function (x) {
              return function (y) {
                  return function (op) {
                      return function (dctx) {
                          var y$prime = toBaseY(dctx.monitorSize)(y);
                          var halfSize = Data_Int.toNumber(size) / 2.0;
                          return function __do() {
                              Graphics_Canvas.translate(dctx.ctx)({
                                  translateX: Data_Int.toNumber(x) + halfSize,
                                  translateY: Data_Int.toNumber(y$prime) - halfSize
                              })();
                              op(dctx.ctx)();
                              return drawEmoji(e)(size)(-halfSize)(halfSize)(dctx.ctx)();
                          };
                      };
                  };
              };
          };
      };
  };
  var emo$prime = function (e) {
      return function (size) {
          return function (x) {
              return function (y) {
                  return withLocalDraw(function (dctx) {
                      return Data_Function.flip(drawEmojiWithTrans(e)(size)(x)(y))(dctx)(function (ctx2d) {
                          return Graphics_Canvas.scale(ctx2d)({
                              scaleX: -1.0,
                              scaleY: 1.0
                          });
                      });
                  });
              };
          };
      };
  };
  var emap$prime = emapF(emo$prime);
  var emo = function (e) {
      return function (size) {
          return function (x) {
              return function (y) {
                  return withLocalDraw(function (dctx) {
                      var y$prime = toBaseY(dctx.monitorSize)(y);
                      return drawEmoji(e)(size)(Data_Int.toNumber(x))(Data_Int.toNumber(y$prime))(dctx.ctx);
                  });
              };
          };
      };
  };
  var emap = emapF(emo);
  var degToRad = function (d) {
      return (2.0 * $$Math.pi * Data_Int.toNumber(d)) / 360.0;
  };
  var emor = function (rot) {
      return function (e) {
          return function (size) {
              return function (x) {
                  return function (y) {
                      return withLocalDraw(function (dctx) {
                          return Data_Function.flip(drawEmojiWithTrans(e)(size)(x)(y))(dctx)(function (ctx2d) {
                              return Graphics_Canvas.rotate(ctx2d)(-degToRad(rot));
                          });
                      });
                  };
              };
          };
      };
  };
  var emor$prime = function (rot) {
      return function (e) {
          return function (size) {
              return function (x) {
                  return function (y) {
                      return withLocalDraw(function (dctx) {
                          return Data_Function.flip(drawEmojiWithTrans(e)(size)(x)(y))(dctx)(function (ctx2d) {
                              return function __do() {
                                  Graphics_Canvas.rotate(ctx2d)(-degToRad(rot))();
                                  return Graphics_Canvas.scale(ctx2d)({
                                      scaleX: -1.0,
                                      scaleY: 1.0
                                  })();
                              };
                          });
                      });
                  };
              };
          };
      };
  };
  var cls = function (c) {
      return function (dctx) {
          return function __do() {
              Graphics_Canvas.setFillStyle(dctx.ctx)(Emo8_Data_Color.colorToCode(c))();
              return Graphics_Canvas.fillRect(dctx.ctx)({
                  x: 0.0,
                  y: 0.0,
                  width: Data_Int.toNumber(dctx.monitorSize.width),
                  height: Data_Int.toNumber(dctx.monitorSize.height)
              })();
          };
      };
  };
  var runDraw = function (dctx) {
      var interpret = function (v) {
          if (v instanceof Emo8_Action_Draw.ClearScreen) {
              return Data_Functor.map(Effect.functorEffect)(Data_Function["const"](v.value1))(cls(v.value0)(dctx));
          };
          if (v instanceof Emo8_Action_Draw.Emo && v.value0 instanceof Emo8_Action_Draw.Normal) {
              return Data_Functor.map(Effect.functorEffect)(Data_Function["const"](v.value5))(emo(v.value1)(v.value2)(v.value3)(v.value4)(dctx));
          };
          if (v instanceof Emo8_Action_Draw.Emo && v.value0 instanceof Emo8_Action_Draw.Mirrored) {
              return Data_Functor.map(Effect.functorEffect)(Data_Function["const"](v.value5))(emo$prime(v.value1)(v.value2)(v.value3)(v.value4)(dctx));
          };
          if (v instanceof Emo8_Action_Draw.Emor && v.value0 instanceof Emo8_Action_Draw.Normal) {
              return Data_Functor.map(Effect.functorEffect)(Data_Function["const"](v.value6))(emor(v.value1)(v.value2)(v.value3)(v.value4)(v.value5)(dctx));
          };
          if (v instanceof Emo8_Action_Draw.Emor && v.value0 instanceof Emo8_Action_Draw.Mirrored) {
              return Data_Functor.map(Effect.functorEffect)(Data_Function["const"](v.value6))(emor$prime(v.value1)(v.value2)(v.value3)(v.value4)(v.value5)(dctx));
          };
          if (v instanceof Emo8_Action_Draw.Emap && v.value0 instanceof Emo8_Action_Draw.Normal) {
              return Data_Functor.map(Effect.functorEffect)(Data_Function["const"](v.value5))(emap(v.value1)(v.value2)(v.value3)(v.value4)(dctx));
          };
          if (v instanceof Emo8_Action_Draw.Emap && v.value0 instanceof Emo8_Action_Draw.Mirrored) {
              return Data_Functor.map(Effect.functorEffect)(Data_Function["const"](v.value5))(emap$prime(v.value1)(v.value2)(v.value3)(v.value4)(dctx));
          };
          throw new Error("Failed pattern match at Emo8.Interpreter.Draw (line 27, column 5 - line 27, column 33): " + [ v.constructor.name ]);
      };
      return Control_Monad_Free.foldFree(Control_Monad_Rec_Class.monadRecEffect)(interpret);
  };
  exports["runDraw"] = runDraw;
  exports["cls"] = cls;
  exports["withLocalDraw"] = withLocalDraw;
  exports["drawEmojiWithTrans"] = drawEmojiWithTrans;
  exports["drawEmoji"] = drawEmoji;
  exports["emo"] = emo;
  exports["emor"] = emor;
  exports["emap"] = emap;
  exports["emapF"] = emapF;
  exports["toBaseY"] = toBaseY;
  exports["degToRad"] = degToRad;
  exports["sizeToFont"] = sizeToFont;
})(PS["Emo8.Interpreter.Draw"] = PS["Emo8.Interpreter.Draw"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Audio_WebAudio_AudioParam = PS["Audio.WebAudio.AudioParam"];
  var Audio_WebAudio_BaseAudioContext = PS["Audio.WebAudio.BaseAudioContext"];
  var Audio_WebAudio_GainNode = PS["Audio.WebAudio.GainNode"];
  var Audio_WebAudio_Oscillator = PS["Audio.WebAudio.Oscillator"];
  var Audio_WebAudio_Types = PS["Audio.WebAudio.Types"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Effect = PS["Effect"];
  var Emo8_Constants = PS["Emo8.Constants"];
  var Emo8_Data_Audio = PS["Emo8.Data.Audio"];
  var Emo8_Data_Channel = PS["Emo8.Data.Channel"];
  var Emo8_Data_Tick = PS["Emo8.Data.Tick"];
  var Prelude = PS["Prelude"];                 
  var setVol = function (t) {
      return function (itv) {
          return function (gn) {
              return function (vol) {
                  var volume = Emo8_Data_Audio.volToGain(vol);
                  var decay = itv / 2.0;
                  return function __do() {
                      var v = Audio_WebAudio_GainNode.gain(gn)();
                      return Data_Functor["void"](Effect.functorEffect)(Audio_WebAudio_AudioParam.setTargetAtTime(volume)(t)(decay)(v))();
                  };
              };
          };
      };
  };
  var setSoundNode = function (set) {
      return function (ctx) {
          return function __do() {
              Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(set.osclNodes)(function (osc) {
                  return Audio_WebAudio_Types.connect(Audio_WebAudio_Types.connectableGainNode)(Audio_WebAudio_Types.audioNodeOscillatorNode)(osc)(set.gainNode);
              })();
              var v = Audio_WebAudio_BaseAudioContext.destination(ctx)();
              return Audio_WebAudio_Types.connect(Audio_WebAudio_Types.connectableDestinationNode)(Audio_WebAudio_Types.audioNodeGainNode)(set.gainNode)(v)();
          };
      };
  };
  var setFreq = function (t) {
      return function (on) {
          return function (freq) {
              return function __do() {
                  var v = Audio_WebAudio_Oscillator.frequency(on)();
                  return Data_Functor["void"](Effect.functorEffect)(Audio_WebAudio_AudioParam.setValueAtTime(freq)(t)(v))();
              };
          };
      };
  };
  var setScale = function (t) {
      return function (on) {
          return function (scale) {
              var freq = Emo8_Data_Audio.noteToFreq(scale.note) * Emo8_Data_Audio.octaveToMult(scale.octave);
              return setFreq(t)(on)(freq);
          };
      };
  };
  var unsetScale = function (t) {
      return function (on) {
          return setFreq(t)(on)(0.0);
      };
  };
  var setEfct = function (t) {
      return function (on) {
          return function (efct) {
              var det = Emo8_Data_Audio.efctToDetune(efct);
              return function __do() {
                  var v = Audio_WebAudio_Oscillator.detune(on)();
                  return Data_Functor["void"](Effect.functorEffect)(Audio_WebAudio_AudioParam.setValueAtTime(det)(t)(v))();
              };
          };
      };
  };
  var mkChannelSet = function (ctx) {
      return Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)(function (v) {
          return function (v1) {
              return {
                  osclNodes: v,
                  gainNode: v1
              };
          };
      })(Data_Unfoldable.replicateA(Effect.applicativeEffect)(Data_Unfoldable.unfoldableArray)(Data_Traversable.traversableArray)(Emo8_Constants.maxNoteSize)(Audio_WebAudio_BaseAudioContext.createOscillator(ctx))))(Audio_WebAudio_BaseAudioContext.createGain(ctx));
  };
  var mkChannelSets = function (ctx) {
      return Control_Apply.apply(Effect.applyEffect)(Control_Apply.apply(Effect.applyEffect)(Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return {
                          set1: v,
                          set2: v1,
                          set3: v2,
                          set4: v3
                      };
                  };
              };
          };
      })(mkChannelSet(ctx)))(mkChannelSet(ctx)))(mkChannelSet(ctx)))(mkChannelSet(ctx));
  };
  var getChannelSet = function (v) {
      return function (sets) {
          if (v instanceof Emo8_Data_Channel.CH1) {
              return sets.set1;
          };
          if (v instanceof Emo8_Data_Channel.CH2) {
              return sets.set2;
          };
          if (v instanceof Emo8_Data_Channel.CH3) {
              return sets.set3;
          };
          if (v instanceof Emo8_Data_Channel.CH4) {
              return sets.set4;
          };
          throw new Error("Failed pattern match at Emo8.SoundUtil (line 45, column 1 - line 45, column 54): " + [ v.constructor.name, sets.constructor.name ]);
      };
  };
  var setSoundNodes = function (sets) {
      return function (ctx) {
          return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Emo8_Data_Channel.channels)(function (ch) {
              return setSoundNode(getChannelSet(ch)(sets))(ctx);
          });
      };
  };
  var cancelVol = function (now) {
      return function (gn) {
          return function (ctx) {
              return function __do() {
                  var v = Audio_WebAudio_GainNode.gain(gn)();
                  Data_Functor["void"](Effect.functorEffect)(Audio_WebAudio_AudioParam.cancelScheduledValues(now)(v))();
                  return Audio_WebAudio_AudioParam.setValue(0.0)(v)();
              };
          };
      };
  };
  var startSoundNode = function (set) {
      return function (ctx) {
          return function __do() {
              var v = Audio_WebAudio_BaseAudioContext.currentTime(ctx)();
              Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(set.osclNodes)(Audio_WebAudio_Oscillator.startOscillator(v))();
              return cancelVol(v)(set.gainNode)(ctx)();
          };
      };
  };
  var startSoundNodes = function (sets) {
      return function (ctx) {
          return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Emo8_Data_Channel.channels)(function (ch) {
              return startSoundNode(getChannelSet(ch)(sets))(ctx);
          });
      };
  };
  var prepareSound = function (sets) {
      return function (ctx) {
          return function __do() {
              setSoundNodes(sets)(ctx)();
              return startSoundNodes(sets)(ctx)();
          };
      };
  };
  var cancelScale = function (now) {
      return function (on) {
          return function (ctx) {
              return function __do() {
                  var v = Audio_WebAudio_Oscillator.frequency(on)();
                  Data_Functor["void"](Effect.functorEffect)(Audio_WebAudio_AudioParam.cancelScheduledValues(now)(v))();
                  return Audio_WebAudio_AudioParam.setValue(0.0)(v)();
              };
          };
      };
  };
  var cancelEfct = function (now) {
      return function (on) {
          return function (ctx) {
              return function __do() {
                  var v = Audio_WebAudio_Oscillator.detune(on)();
                  Data_Functor["void"](Effect.functorEffect)(Audio_WebAudio_AudioParam.cancelScheduledValues(now)(v))();
                  return Audio_WebAudio_AudioParam.setValue(0.0)(v)();
              };
          };
      };
  };
  exports["getChannelSet"] = getChannelSet;
  exports["mkChannelSets"] = mkChannelSets;
  exports["prepareSound"] = prepareSound;
  exports["setVol"] = setVol;
  exports["cancelVol"] = cancelVol;
  exports["setEfct"] = setEfct;
  exports["cancelEfct"] = cancelEfct;
  exports["setScale"] = setScale;
  exports["unsetScale"] = unsetScale;
  exports["cancelScale"] = cancelScale;
})(PS["Emo8.SoundUtil"] = PS["Emo8.SoundUtil"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Audio_WebAudio_BaseAudioContext = PS["Audio.WebAudio.BaseAudioContext"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect = PS["Effect"];
  var Emo8_Action_Sound = PS["Emo8.Action.Sound"];
  var Emo8_Constants = PS["Emo8.Constants"];
  var Emo8_Data_Channel = PS["Emo8.Data.Channel"];
  var Emo8_Data_Tick = PS["Emo8.Data.Tick"];
  var Emo8_Data_Tone = PS["Emo8.Data.Tone"];
  var Emo8_Excepiton = PS["Emo8.Excepiton"];
  var Emo8_SoundUtil = PS["Emo8.SoundUtil"];
  var Emo8_Types = PS["Emo8.Types"];
  var Prelude = PS["Prelude"];                 
  var halt = function (ch) {
      return function (sctx) {
          var chSet = Emo8_SoundUtil.getChannelSet(ch)(sctx.channelSets);
          return function __do() {
              var v = Audio_WebAudio_BaseAudioContext.currentTime(sctx.ctx)();
              Emo8_SoundUtil.cancelVol(v)(chSet.gainNode)(sctx.ctx)();
              return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(chSet.osclNodes)(function (osc) {
                  return function __do() {
                      Emo8_SoundUtil.cancelEfct(v)(osc)(sctx.ctx)();
                      return Emo8_SoundUtil.cancelScale(v)(osc)(sctx.ctx)();
                  };
              })();
          };
      };
  };
  var haltall = function (sctx) {
      return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Emo8_Data_Channel.channels)(function (ch) {
          return halt(ch)(sctx);
      });
  };
  var play = function (ch) {
      return function (sId) {
          return function (tone) {
              return function (tempo) {
                  return function (sctx) {
                      var interval = 60.0 / Data_Int.toNumber(tempo);
                      return function __do() {
                          halt(ch)(sctx)();
                          return Emo8_Excepiton.providedSound(sctx.soundData)(sId)(function (ticks$prime) {
                              var ticks = Data_Semigroup.append(Data_Semigroup.semigroupArray)(ticks$prime)([ Emo8_Data_Tick.emptyTick ]);
                              var chSet = Emo8_SoundUtil.getChannelSet(ch)(sctx.channelSets);
                              return function __do() {
                                  var v = Audio_WebAudio_BaseAudioContext.currentTime(sctx.ctx)();
                                  var len = Data_Array.length(ticks);
                                  var ts = Data_Array.range(0)(len - 1 | 0);
                                  var startTimes = Data_Functor.map(Data_Functor.functorArray)(function ($25) {
                                      return v + interval * Data_Int.toNumber($25);
                                  })(ts);
                                  var tickWithTimes = Data_Array.zip(startTimes)(ticks);
                                  var oscWithIds = Data_Array.zip(Data_Array.range(0)(Emo8_Constants.maxNoteSize - 1 | 0))(chSet.osclNodes);
                                  Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(chSet.osclNodes)(function (osc) {
                                      return Emo8_Data_Tone.setTone(tone)(osc)(sctx.ctx);
                                  })();
                                  return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(tickWithTimes)(function (v1) {
                                      return function __do() {
                                          Emo8_SoundUtil.setVol(v1.value0)(interval)(chSet.gainNode)(v1.value1.vol)();
                                          return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(oscWithIds)(function (v2) {
                                              return function __do() {
                                                  Emo8_SoundUtil.setEfct(v1.value0)(v2.value1)(v1.value1.efct)();
                                                  var v3 = Data_Array.index(v1.value1.scales)(v2.value0);
                                                  if (v3 instanceof Data_Maybe.Just) {
                                                      return Emo8_SoundUtil.setScale(v1.value0)(v2.value1)(v3.value0)();
                                                  };
                                                  if (v3 instanceof Data_Maybe.Nothing) {
                                                      return Emo8_SoundUtil.unsetScale(v1.value0)(v2.value1)();
                                                  };
                                                  throw new Error("Failed pattern match at Emo8.Interpreter.Sound (line 59, column 21 - line 61, column 60): " + [ v3.constructor.name ]);
                                              };
                                          })();
                                      };
                                  })();
                              };
                          })();
                      };
                  };
              };
          };
      };
  };
  var runSound = function (sctx) {
      var interpret = function (v) {
          if (v instanceof Emo8_Action_Sound.Play) {
              return Data_Functor.map(Effect.functorEffect)(Data_Function["const"](v.value4))(play(v.value0)(v.value1)(v.value2)(v.value3)(sctx));
          };
          if (v instanceof Emo8_Action_Sound.Halt) {
              return Data_Functor.map(Effect.functorEffect)(Data_Function["const"](v.value1))(halt(v.value0)(sctx));
          };
          if (v instanceof Emo8_Action_Sound.HaltAll) {
              return Data_Functor.map(Effect.functorEffect)(Data_Function["const"](v.value0))(haltall(sctx));
          };
          throw new Error("Failed pattern match at Emo8.Interpreter.Sound (line 27, column 5 - line 27, column 34): " + [ v.constructor.name ]);
      };
      return Control_Monad_Free.foldFree(Control_Monad_Rec_Class.monadRecEffect)(interpret);
  };
  exports["runSound"] = runSound;
  exports["play"] = play;
  exports["halt"] = halt;
  exports["haltall"] = haltall;
})(PS["Emo8.Interpreter.Sound"] = PS["Emo8.Interpreter.Sound"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Effect_Random = PS["Effect.Random"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Seed = function (x) {
      return x;
  };
  var unSeed = function (v) {
      return v;
  }; 
  var seedMin = 1;
  var lcgM = 2147483647;
  var seedMax = lcgM - 1 | 0;
  var mkSeed = function (x) {
      var ensureBetween = function (min) {
          return function (max) {
              return function (n) {
                  var rangeSize = max - min | 0;
                  var n$prime = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(n)(rangeSize);
                  var $14 = n$prime < min;
                  if ($14) {
                      return n$prime + max | 0;
                  };
                  return n$prime;
              };
          };
      };
      return ensureBetween(seedMin)(seedMax)(x);
  };
  var randomSeed = Data_Functor.map(Effect.functorEffect)(mkSeed)(Effect_Random.randomInt(seedMin)(seedMax));
  var lcgC = 0;
  var lcgA = 48271;
  var lcgPerturb = function (d) {
      return function (v) {
          return Seed(Data_Maybe.fromJust()(Data_Int.fromNumber($$Math.remainder(Data_Int.toNumber(lcgA) * Data_Int.toNumber(v) + d)(Data_Int.toNumber(lcgM)))));
      };
  };
  var lcgNext = lcgPerturb(Data_Int.toNumber(lcgC));
  exports["mkSeed"] = mkSeed;
  exports["unSeed"] = unSeed;
  exports["randomSeed"] = randomSeed;
  exports["lcgA"] = lcgA;
  exports["lcgC"] = lcgC;
  exports["lcgM"] = lcgM;
  exports["lcgNext"] = lcgNext;
  exports["lcgPerturb"] = lcgPerturb;
})(PS["Random.LCG"] = PS["Random.LCG"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Monad_ST_Ref = PS["Control.Monad.ST.Ref"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Random_LCG = PS["Random.LCG"];                 
  var Random = function (Ord0, random, randomR) {
      this.Ord0 = Ord0;
      this.random = random;
      this.randomR = randomR;
  };
  var randomR = function (dict) {
      return dict.randomR;
  };
  var randomREff = function (dictRandom) {
      return function (min) {
          return function (max) {
              return Control_Bind.bindFlipped(Effect.bindEffect)(function ($24) {
                  return Control_Applicative.pure(Effect.applicativeEffect)((function (v) {
                      return v.newVal;
                  })(randomR(dictRandom)(min)(max)($24)));
              })(Random_LCG.randomSeed);
          };
      };
  };
  var random = function (dict) {
      return dict.random;
  };
  var randomInt = new Random(function () {
      return Data_Ord.ordInt;
  }, function (seed) {
      var newSeed = Random_LCG.lcgNext(seed);
      return {
          newVal: Random_LCG.unSeed(newSeed),
          newSeed: newSeed
      };
  }, function (min) {
      return function (max) {
          return function (seed) {
              if (min > max) {
                  return randomR(randomInt)(max)(min)(seed);
              };
              if (Data_Boolean.otherwise) {
                  var rp = random(randomInt)(seed);
                  var newVal = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(rp.newVal)((max - min | 0) + 1 | 0) + min | 0;
                  return {
                      newVal: newVal,
                      newSeed: rp.newSeed
                  };
              };
              throw new Error("Failed pattern match at Random.PseudoRandom (line 33, column 1 - line 33, column 33): " + [ min.constructor.name, max.constructor.name, seed.constructor.name ]);
          };
      };
  });
  var randomNumber = new Random(function () {
      return Data_Ord.ordNumber;
  }, function (seed) {
      var intRp = random(randomInt)(seed);
      var newVal = Data_Int.toNumber(intRp.newVal) / Data_Int.toNumber(Random_LCG.lcgM);
      return {
          newVal: newVal,
          newSeed: intRp.newSeed
      };
  }, function (min) {
      return function (max) {
          return function (seed) {
              if (min > max) {
                  return randomR(randomNumber)(max)(min)(seed);
              };
              if (Data_Boolean.otherwise) {
                  var rp = random(randomNumber)(seed);
                  var newVal = rp.newVal * (max - min) + min;
                  return {
                      newVal: newVal,
                      newSeed: rp.newSeed
                  };
              };
              throw new Error("Failed pattern match at Random.PseudoRandom (line 44, column 1 - line 44, column 39): " + [ min.constructor.name, max.constructor.name, seed.constructor.name ]);
          };
      };
  });
  exports["Random"] = Random;
  exports["random"] = random;
  exports["randomR"] = randomR;
  exports["randomREff"] = randomREff;
  exports["randomInt"] = randomInt;
  exports["randomNumber"] = randomNumber;
})(PS["Random.PseudoRandom"] = PS["Random.PseudoRandom"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Gen = PS["Control.Monad.Gen"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Array = PS["Data.Array"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Effect = PS["Effect"];
  var Emo8_Action_Update = PS["Emo8.Action.Update"];
  var Emo8_Class_Game = PS["Emo8.Class.Game"];
  var Emo8_Data_Emoji = PS["Emo8.Data.Emoji"];
  var Emo8_Excepiton = PS["Emo8.Excepiton"];
  var Emo8_Types = PS["Emo8.Types"];
  var Prelude = PS["Prelude"];
  var Random_PseudoRandom = PS["Random.PseudoRandom"];                 
  var getMapEmoji = function (ass) {
      return function (mId) {
          return function (xId) {
              return function (yId) {
                  return Emo8_Excepiton.providedMap(ass.mapData)(mId)(function (em) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(Data_Array.reverse(em))(yId))(Data_Function.flip(Data_Array.index)(xId)));
                  });
              };
          };
      };
  };
  var isMapCollide = function (asset) {
      return function (mId) {
          return function (mSize) {
              return function (walls) {
                  return function (size) {
                      return function (x) {
                          return function (y) {
                              var ty = (y + size | 0) - 1 | 0;
                              var rx = (x + size | 0) - 1 | 0;
                              var f = function (mE) {
                                  return function (b) {
                                      if (mE instanceof Data_Maybe.Just && Data_Foldable.elem(Data_Foldable.foldableArray)(Emo8_Data_Emoji.eqEmoji)(mE.value0)(walls)) {
                                          return true;
                                      };
                                      return b;
                                  };
                              };
                              return function __do() {
                                  var v = getMapEmoji(asset)(mId)(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(x)(mSize))(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(y)(mSize))();
                                  var v1 = getMapEmoji(asset)(mId)(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(rx)(mSize))(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(y)(mSize))();
                                  var v2 = getMapEmoji(asset)(mId)(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(x)(mSize))(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(ty)(mSize))();
                                  var v3 = getMapEmoji(asset)(mId)(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(rx)(mSize))(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(ty)(mSize))();
                                  return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(false)([ v, v1, v2, v3 ]);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var runUpdate = function (dictGame) {
      return function (ass) {
          var interpret = function (v) {
              if (v instanceof Emo8_Action_Update.RandomInt) {
                  return Data_Functor.map(Effect.functorEffect)(v.value2)(Random_PseudoRandom.randomREff(Random_PseudoRandom.randomInt)(v.value0)(v.value1));
              };
              if (v instanceof Emo8_Action_Update.RandomNumber) {
                  return Data_Functor.map(Effect.functorEffect)(v.value2)(Random_PseudoRandom.randomREff(Random_PseudoRandom.randomNumber)(v.value0)(v.value1));
              };
              if (v instanceof Emo8_Action_Update.IsMapCollide) {
                  return Data_Functor.map(Effect.functorEffect)(v.value6)(isMapCollide(ass)(v.value0)(v.value1)(v.value2)(v.value3)(v.value4)(v.value5));
              };
              throw new Error("Failed pattern match at Emo8.Interpreter.Update (line 21, column 5 - line 21, column 35): " + [ v.constructor.name ]);
          };
          return Control_Monad_Free.foldFree(Control_Monad_Rec_Class.monadRecEffect)(interpret);
      };
  };
  exports["runUpdate"] = runUpdate;
  exports["isMapCollide"] = isMapCollide;
  exports["getMapEmoji"] = getMapEmoji;
})(PS["Emo8.Interpreter.Update"] = PS["Emo8.Interpreter.Update"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Audio_WebAudio_BaseAudioContext = PS["Audio.WebAudio.BaseAudioContext"];
  var Audio_WebAudio_Types = PS["Audio.WebAudio.Types"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Emo8_Data_KeyTouchInput = PS["Emo8.Data.KeyTouchInput"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];                 
  var resumeByUserGestureOnce = function (ctx) {
      return function (sig) {
          var upd = function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      var $4 = Emo8_Data_KeyTouchInput.anyKeyTouch(v);
                      if ($4) {
                          return new Data_Maybe.Just(true);
                      };
                      return Data_Maybe.Nothing.value;
                  };
                  if (v1 instanceof Data_Maybe.Just && v1.value0) {
                      return new Data_Maybe.Just(false);
                  };
                  if (v1 instanceof Data_Maybe.Just && !v1.value0) {
                      return new Data_Maybe.Just(false);
                  };
                  throw new Error("Failed pattern match at Emo8.SoundByUserGesture (line 22, column 5 - line 22, column 65): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return Data_Functor.map(Signal.functorSignal)(function (s) {
              if (s instanceof Data_Maybe.Just && !s.value0) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              };
              return Audio_WebAudio_BaseAudioContext.resume(ctx);
          })(Signal.foldp(upd)(Data_Maybe.Nothing.value)(sig));
      };
  };
  exports["resumeByUserGestureOnce"] = resumeByUserGestureOnce;
})(PS["Emo8.SoundByUserGesture"] = PS["Emo8.SoundByUserGesture"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Effect = PS["Effect"];
  var Emo8_Excepiton = PS["Emo8.Excepiton"];
  var Emo8_Parse = PS["Emo8.Parse"];
  var Emo8_Types = PS["Emo8.Types"];
  var Prelude = PS["Prelude"];                 
  var mkAsset = function (rms) {
      return function (rss) {
          return function __do() {
              var v = Emo8_Excepiton.orErrMsg(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Emo8_Parse.parseEmojiMap)(rms))();
              var v1 = Emo8_Excepiton.orErrMsg(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Emo8_Parse.parseSound)(rss))();
              return {
                  mapData: v,
                  soundData: v1
              };
          };
      };
  };
  var emptyAsset = {
      mapData: [  ],
      soundData: [  ]
  };
  var defaultMonitorSize = {
      width: 512,
      height: 512
  };
  exports["mkAsset"] = mkAsset;
  exports["emptyAsset"] = emptyAsset;
  exports["defaultMonitorSize"] = defaultMonitorSize;
})(PS["Emo8.Utils"] = PS["Emo8.Utils"] || {});
(function(exports) {

  exports.foldEffectP = function (make) {
    return function (fun) {
      return function (seed) {
        return function (sig) {
          return function () {
            var acc = seed;
            var out = make(acc);
            sig.subscribe(function (val) {
              acc = fun(val)(acc)();
              out.set(acc);
            });
            return out;
          };
        };
      };
    };
  };
})(PS["Signal.Effect"] = PS["Signal.Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var $foreign = PS["Signal.Effect"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];                                       
  var foldEffect = $foreign.foldEffectP(Signal.constant);
  exports["foldEffect"] = foldEffect;
})(PS["Signal.Effect"] = PS["Signal.Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Audio_WebAudio_BaseAudioContext = PS["Audio.WebAudio.BaseAudioContext"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Effect = PS["Effect"];
  var Effect_Exception = PS["Effect.Exception"];
  var Emo8_Boot = PS["Emo8.Boot"];
  var Emo8_Class_Game = PS["Emo8.Class.Game"];
  var Emo8_Class_GameDev = PS["Emo8.Class.GameDev"];
  var Emo8_Class_Input = PS["Emo8.Class.Input"];
  var Emo8_Constants = PS["Emo8.Constants"];
  var Emo8_Data_GameWithBoot = PS["Emo8.Data.GameWithBoot"];
  var Emo8_Data_KeyTouchInput = PS["Emo8.Data.KeyTouchInput"];
  var Emo8_Input = PS["Emo8.Input"];
  var Emo8_Interpreter_Draw = PS["Emo8.Interpreter.Draw"];
  var Emo8_Interpreter_Sound = PS["Emo8.Interpreter.Sound"];
  var Emo8_Interpreter_Update = PS["Emo8.Interpreter.Update"];
  var Emo8_SoundByUserGesture = PS["Emo8.SoundByUserGesture"];
  var Emo8_SoundUtil = PS["Emo8.SoundUtil"];
  var Emo8_Types = PS["Emo8.Types"];
  var Emo8_Utils = PS["Emo8.Utils"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_DOM = PS["Signal.DOM"];
  var Signal_Effect = PS["Signal.Effect"];                 
  var withCanvas = function (op) {
      return function __do() {
          var v = Graphics_Canvas.getCanvasElementById(Emo8_Constants.canvasId)();
          if (v instanceof Data_Maybe.Just) {
              return op(v.value0)();
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Effect_Exception["throw"](Data_String_Common.joinWith(" ")([ "canvas id:", Emo8_Constants.canvasId, "was not found." ]))();
          };
          throw new Error("Failed pattern match at Emo8 (line 95, column 3 - line 97, column 79): " + [ v.constructor.name ]);
      };
  };
  var setDim = function (canvas) {
      return function (ms) {
          return function __do() {
              Graphics_Canvas.setCanvasWidth(canvas)(Data_Int.toNumber(ms.width))();
              return Graphics_Canvas.setCanvasHeight(canvas)(Data_Int.toNumber(ms.height))();
          };
      };
  };
  var emo8 = function (dictGame) {
      return function (state) {
          return function (asset) {
              return function (ms) {
                  return withCanvas(function (canvas) {
                      return function __do() {
                          setDim(canvas)(ms)();
                          var v = Graphics_Canvas.getContext2D(canvas)();
                          var v1 = Audio_WebAudio_BaseAudioContext.newAudioContext();
                          var v2 = Emo8_SoundUtil.mkChannelSets(v1)();
                          var v3 = Emo8_Utils.mkAsset([  ])([ Emo8_Boot.bootRawSound ])();
                          var soundCtx = {
                              ctx: v1,
                              soundData: asset.soundData,
                              channelSets: v2
                          };
                          var drawCtx = {
                              ctx: v,
                              mapData: asset.mapData,
                              monitorSize: ms
                          };
                          var bootState = Emo8_Boot.initialState(ms);
                          var bootSoundCtx = {
                              ctx: v1,
                              soundData: v3.soundData,
                              channelSets: v2
                          };
                          var bootDrawCtx = {
                              ctx: v,
                              mapData: v3.mapData,
                              monitorSize: ms
                          };
                          var v4 = Signal_DOM.animationFrame();
                          var v5 = Emo8_Class_Input.poll(Emo8_Data_KeyTouchInput.inputKeyTouchInput)();
                          var keyTouchInputSampleSig = Signal.sampleOn(v4)(v5);
                          var inputSampleSig = Emo8_Input.mkInputSig(keyTouchInputSampleSig);
                          var biState = new Emo8_Data_GameWithBoot.GameWithBoot(state, bootState);
                          var v6 = Signal_Effect.foldEffect(Emo8_Data_GameWithBoot.switchFoldOp(dictGame)(Emo8_Boot.gameBootState)(function (i) {
                              return function ($35) {
                                  return Emo8_Interpreter_Update.runUpdate(dictGame)(asset)(Emo8_Class_Game.update(dictGame)(i)($35));
                              };
                          })(function (i) {
                              return function ($36) {
                                  return Emo8_Interpreter_Update.runUpdate(Emo8_Boot.gameState)(v3)(Emo8_Class_Game.update(Emo8_Boot.gameState)(i)($36));
                              };
                          }))(biState)(inputSampleSig)();
                          Signal.runSignal(Emo8_Data_GameWithBoot.switchOp(dictGame)(Emo8_Boot.gameBootState)(function ($37) {
                              return Emo8_Interpreter_Draw.runDraw(drawCtx)(Emo8_Class_Game.draw(dictGame)($37));
                          })(function ($38) {
                              return Emo8_Interpreter_Draw.runDraw(bootDrawCtx)(Emo8_Class_Game.draw(Emo8_Boot.gameState)($38));
                          })(v6))();
                          Signal.runSignal(Emo8_Data_GameWithBoot.switchOp(dictGame)(Emo8_Boot.gameBootState)(function ($39) {
                              return Emo8_Interpreter_Sound.runSound(soundCtx)(Emo8_Class_Game.sound(dictGame)($39));
                          })(function ($40) {
                              return Emo8_Interpreter_Sound.runSound(bootSoundCtx)(Emo8_Class_Game.sound(Emo8_Boot.gameState)($40));
                          })(v6))();
                          Signal.runSignal(Emo8_SoundByUserGesture.resumeByUserGestureOnce(v1)(v5))();
                          return Emo8_SoundUtil.prepareSound(v2)(v1)();
                      };
                  });
              };
          };
      };
  };
  exports["emo8"] = emo8;
})(PS["Emo8"] = PS["Emo8"] || {});
(function(exports) {
  // Generated by purs version 0.12.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Emo8 = PS["Emo8"];
  var Emo8_Action_Draw = PS["Emo8.Action.Draw"];
  var Emo8_Class_Game = PS["Emo8.Class.Game"];
  var Emo8_Data_Color = PS["Emo8.Data.Color"];
  var Emo8_Data_Emoji = PS["Emo8.Data.Emoji"];
  var Emo8_Utils = PS["Emo8.Utils"];
  var Prelude = PS["Prelude"];                 
  var Void = (function () {
      function Void() {

      };
      Void.value = new Void();
      return Void;
  })();
  var gameState = new Emo8_Class_Game.Game(function (v) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Emo8_Action_Draw.cls(Emo8_Data_Color.Maroon.value))(function () {
          return Emo8_Action_Draw.emo(Emo8_Data_Emoji.hatchingChick)(128)(192)(192);
      });
  }, function (v) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Unit.unit);
  }, function (v) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative);
  });
  var main = Emo8.emo8(gameState)(Void.value)(Emo8_Utils.emptyAsset)(Emo8_Utils.defaultMonitorSize);
  exports["Void"] = Void;
  exports["main"] = main;
  exports["gameState"] = gameState;
})(PS["Hello"] = PS["Hello"] || {});
PS["Hello"].main();